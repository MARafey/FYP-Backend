# Generated from Files/CPP14.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,141,2468,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,1,0,3,0,400,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,3,1,412,8,1,1,2,1,2,3,2,416,8,2,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,3,3,427,8,3,1,4,1,4,3,4,431,8,4,1,4,1,4,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,446,8,5,1,5,1,5,1,5,1,5,1,
        5,3,5,453,8,5,1,5,1,5,1,5,5,5,458,8,5,10,5,12,5,461,9,5,1,6,1,6,
        3,6,465,8,6,1,6,1,6,1,7,1,7,3,7,471,8,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,8,3,8,481,8,8,1,9,1,9,1,10,1,10,1,10,3,10,488,8,10,1,10,1,
        10,1,10,1,10,3,10,494,8,10,5,10,496,8,10,10,10,12,10,499,9,10,1,
        11,1,11,3,11,503,8,11,1,12,1,12,1,12,1,12,3,12,509,8,12,1,13,1,13,
        1,13,1,13,1,13,3,13,516,8,13,1,14,1,14,1,14,1,14,3,14,522,8,14,1,
        14,3,14,525,8,14,1,14,3,14,528,8,14,1,14,3,14,531,8,14,1,15,1,15,
        1,15,1,15,1,15,3,15,538,8,15,1,15,1,15,1,15,1,15,1,15,3,15,545,8,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,597,
        8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,3,15,612,8,15,1,15,1,15,1,15,1,15,3,15,618,8,15,1,15,1,15,1,
        15,1,15,3,15,624,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,5,15,637,8,15,10,15,12,15,640,9,15,1,16,1,16,1,17,3,
        17,645,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,3,17,660,8,17,1,17,1,17,1,17,1,17,3,17,666,8,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,3,18,696,8,18,1,19,1,19,1,20,3,20,701,8,20,1,20,1,20,3,20,705,
        8,20,1,20,1,20,3,20,709,8,20,1,20,3,20,712,8,20,1,20,1,20,3,20,716,
        8,20,1,20,1,20,1,20,1,20,3,20,722,8,20,3,20,724,8,20,1,21,1,21,1,
        21,1,21,1,22,1,22,3,22,732,8,22,1,23,1,23,3,23,736,8,23,1,23,3,23,
        739,8,23,1,24,1,24,1,24,1,24,1,24,3,24,746,8,24,1,24,1,24,1,24,1,
        24,1,24,3,24,753,8,24,5,24,755,8,24,10,24,12,24,758,9,24,1,25,1,
        25,3,25,762,8,25,1,25,1,25,3,25,766,8,25,1,26,3,26,769,8,26,1,26,
        1,26,1,26,3,26,774,8,26,1,26,1,26,1,26,1,26,3,26,780,8,26,1,27,1,
        27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,793,8,28,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,804,8,29,10,29,12,
        29,807,9,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,5,30,821,8,30,10,30,12,30,824,9,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,5,31,835,8,31,10,31,12,31,838,9,31,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,850,8,32,10,32,12,
        32,853,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,5,33,870,8,33,10,33,12,33,873,9,33,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,884,8,34,10,34,12,34,
        887,9,34,1,35,1,35,1,35,1,35,1,35,1,35,5,35,895,8,35,10,35,12,35,
        898,9,35,1,36,1,36,1,36,1,36,1,36,1,36,5,36,906,8,36,10,36,12,36,
        909,9,36,1,37,1,37,1,37,1,37,1,37,1,37,5,37,917,8,37,10,37,12,37,
        920,9,37,1,38,1,38,1,38,1,38,1,38,1,38,5,38,928,8,38,10,38,12,38,
        931,9,38,1,39,1,39,1,39,1,39,1,39,1,39,5,39,939,8,39,10,39,12,39,
        942,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,951,8,40,1,41,1,
        41,1,41,1,41,1,41,1,41,3,41,959,8,41,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,3,42,972,8,42,1,43,1,43,1,43,1,43,1,
        43,1,43,5,43,980,8,43,10,43,12,43,983,9,43,1,44,1,44,1,45,1,45,3,
        45,989,8,45,1,45,1,45,3,45,993,8,45,1,45,1,45,3,45,997,8,45,1,45,
        1,45,3,45,1001,8,45,1,45,1,45,3,45,1005,8,45,1,45,1,45,1,45,3,45,
        1010,8,45,1,45,3,45,1013,8,45,1,46,3,46,1016,8,46,1,46,1,46,1,46,
        1,46,3,46,1022,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1030,8,46,
        1,46,1,46,1,46,3,46,1035,8,46,1,47,3,47,1038,8,47,1,47,1,47,1,48,
        1,48,3,48,1044,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,5,49,1053,
        8,49,10,49,12,49,1056,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,1078,8,50,1,51,1,51,3,51,1082,8,51,1,51,1,51,1,51,1,51,1,51,1,
        51,3,51,1090,8,51,1,51,1,51,1,51,1,51,3,51,1096,8,51,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,3,52,1116,8,52,1,52,1,52,3,52,1120,8,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1133,8,52,1,53,1,
        53,3,53,1137,8,53,1,54,3,54,1140,8,54,1,54,1,54,1,54,1,55,1,55,3,
        55,1147,8,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1155,8,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1165,8,56,1,57,1,57,1,58,1,
        58,1,58,1,58,1,58,5,58,1174,8,58,10,58,12,58,1177,9,58,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1188,8,59,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,3,60,1198,8,60,1,61,1,61,1,61,3,61,1203,
        8,61,1,61,1,61,1,61,1,61,1,62,3,62,1210,8,62,1,62,3,62,1213,8,62,
        1,62,1,62,1,62,3,62,1218,8,62,1,62,1,62,1,62,3,62,1223,8,62,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,66,
        1,66,1,66,1,66,1,66,1,66,3,66,1244,8,66,1,67,1,67,3,67,1248,8,67,
        1,67,1,67,1,67,3,67,1253,8,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,
        1,71,1,71,3,71,1264,8,71,1,72,1,72,1,72,1,72,3,72,1270,8,72,1,73,
        1,73,3,73,1274,8,73,1,73,1,73,1,73,3,73,1279,8,73,1,74,1,74,3,74,
        1283,8,74,1,74,1,74,1,74,3,74,1288,8,74,1,75,3,75,1291,8,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,3,75,1313,8,75,1,76,1,76,1,76,1,76,
        3,76,1319,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,
        1330,8,77,1,78,1,78,3,78,1334,8,78,1,78,3,78,1337,8,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,3,78,1347,8,78,1,78,1,78,1,78,1,78,
        3,78,1353,8,78,1,78,3,78,1356,8,78,1,79,1,79,1,80,1,80,1,80,3,80,
        1363,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1373,8,80,
        1,81,1,81,3,81,1377,8,81,1,81,3,81,1380,8,81,1,81,3,81,1383,8,81,
        1,81,1,81,3,81,1387,8,81,1,81,1,81,1,81,3,81,1392,8,81,3,81,1394,
        8,81,1,82,1,82,3,82,1398,8,82,1,82,1,82,3,82,1402,8,82,1,82,1,82,
        1,83,1,83,1,83,1,83,1,83,3,83,1411,8,83,1,84,1,84,1,84,1,85,1,85,
        1,85,1,85,1,85,1,85,5,85,1422,8,85,10,85,12,85,1425,9,85,1,86,1,
        86,1,86,1,86,1,86,3,86,1432,8,86,1,87,1,87,1,88,1,88,3,88,1438,8,
        88,1,89,1,89,1,90,1,90,3,90,1444,8,90,1,91,1,91,3,91,1448,8,91,1,
        92,3,92,1451,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,93,3,93,1460,8,
        93,1,93,1,93,1,93,1,93,1,93,1,93,1,94,3,94,1469,8,94,1,94,1,94,1,
        94,1,94,1,94,1,95,3,95,1477,8,95,1,96,1,96,1,97,1,97,1,97,1,97,1,
        97,1,97,1,98,3,98,1488,8,98,1,98,1,98,1,99,1,99,3,99,1494,8,99,1,
        99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1505,8,99,1,100,
        3,100,1508,8,100,1,100,1,100,1,100,3,100,1513,8,100,1,100,1,100,
        1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,
        3,102,1528,8,102,1,102,1,102,1,102,1,102,3,102,1534,8,102,1,103,
        1,103,1,103,1,103,1,103,5,103,1541,8,103,10,103,12,103,1544,9,103,
        1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1553,8,104,1,105,
        1,105,1,105,1,105,3,105,1559,8,105,1,105,1,105,1,105,1,105,1,105,
        1,105,3,105,1567,8,105,1,105,1,105,3,105,1571,8,105,1,106,1,106,
        3,106,1575,8,106,1,106,1,106,1,106,3,106,1580,8,106,1,106,1,106,
        1,106,3,106,1585,8,106,1,106,1,106,1,106,1,106,1,106,5,106,1592,
        8,106,10,106,12,106,1595,9,106,1,107,1,107,3,107,1599,8,107,1,108,
        1,108,3,108,1603,8,108,1,109,1,109,1,109,1,109,1,110,1,110,1,111,
        1,111,1,111,1,111,1,112,1,112,3,112,1617,8,112,1,112,1,112,5,112,
        1621,8,112,10,112,12,112,1624,9,112,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1638,8,113,1,114,
        1,114,1,114,1,114,1,114,1,114,5,114,1646,8,114,10,114,12,114,1649,
        9,114,1,115,1,115,3,115,1653,8,115,1,116,1,116,1,116,1,116,1,116,
        3,116,1660,8,116,1,117,1,117,1,117,1,117,3,117,1666,8,117,1,118,
        1,118,1,118,3,118,1671,8,118,1,118,1,118,1,118,1,118,3,118,1677,
        8,118,1,118,1,118,1,118,1,118,1,118,3,118,1684,8,118,1,118,1,118,
        3,118,1688,8,118,5,118,1690,8,118,10,118,12,118,1693,9,118,1,119,
        1,119,1,119,1,119,3,119,1699,8,119,1,119,3,119,1702,8,119,1,119,
        3,119,1705,8,119,1,119,3,119,1708,8,119,1,120,1,120,1,120,3,120,
        1713,8,120,1,121,1,121,3,121,1717,8,121,1,121,3,121,1720,8,121,1,
        121,1,121,3,121,1724,8,121,1,121,1,121,3,121,1728,8,121,1,121,1,
        121,1,121,3,121,1733,8,121,1,121,3,121,1736,8,121,3,121,1738,8,121,
        1,122,1,122,3,122,1742,8,122,1,123,1,123,1,124,1,124,1,125,3,125,
        1749,8,125,1,125,1,125,1,126,1,126,3,126,1755,8,126,1,127,1,127,
        3,127,1759,8,127,1,127,1,127,1,127,1,127,3,127,1765,8,127,1,128,
        1,128,1,128,3,128,1770,8,128,3,128,1772,8,128,1,129,1,129,1,129,
        1,129,3,129,1778,8,129,1,129,1,129,3,129,1782,8,129,1,129,1,129,
        1,129,1,129,3,129,1788,8,129,1,129,1,129,1,129,1,129,1,129,3,129,
        1795,8,129,1,129,1,129,3,129,1799,8,129,5,129,1801,8,129,10,129,
        12,129,1804,9,129,1,130,1,130,1,130,1,130,3,130,1810,8,130,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,1820,8,131,1,131,
        1,131,3,131,1824,8,131,5,131,1826,8,131,10,131,12,131,1829,9,131,
        1,132,3,132,1832,8,132,1,132,3,132,1835,8,132,1,132,1,132,1,132,
        1,132,3,132,1841,8,132,1,133,1,133,1,133,1,133,1,133,1,133,5,133,
        1849,8,133,10,133,12,133,1852,9,133,1,134,3,134,1855,8,134,1,134,
        1,134,1,134,1,134,3,134,1861,8,134,1,134,1,134,1,134,1,134,1,134,
        1,134,3,134,1869,8,134,1,134,1,134,3,134,1873,8,134,1,134,3,134,
        1876,8,134,1,134,1,134,3,134,1880,8,134,1,134,1,134,1,134,3,134,
        1885,8,134,1,135,3,135,1888,8,135,1,135,3,135,1891,8,135,1,135,1,
        135,3,135,1895,8,135,1,135,1,135,1,136,3,136,1900,8,136,1,136,1,
        136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1910,8,136,1,137,1,
        137,1,137,1,137,1,137,3,137,1917,8,137,1,138,1,138,1,138,3,138,1922,
        8,138,1,139,1,139,3,139,1926,8,139,1,140,1,140,1,140,3,140,1931,
        8,140,1,140,1,140,1,140,1,140,3,140,1937,8,140,5,140,1939,8,140,
        10,140,12,140,1942,9,140,1,141,1,141,1,141,3,141,1947,8,141,1,141,
        1,141,1,141,1,141,3,141,1953,8,141,1,142,1,142,3,142,1957,8,142,
        1,143,1,143,1,143,3,143,1962,8,143,1,143,1,143,1,144,1,144,3,144,
        1968,8,144,1,144,1,144,3,144,1972,8,144,1,144,3,144,1975,8,144,1,
        144,1,144,3,144,1979,8,144,1,144,3,144,1982,8,144,3,144,1984,8,144,
        1,145,3,145,1987,8,145,1,145,1,145,1,146,1,146,1,147,1,147,1,148,
        1,148,3,148,1997,8,148,1,148,1,148,1,148,3,148,2002,8,148,3,148,
        2004,8,148,1,149,3,149,2007,8,149,1,149,3,149,2010,8,149,1,149,3,
        149,2013,8,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,2022,
        8,149,1,150,1,150,1,150,1,150,1,150,1,150,5,150,2030,8,150,10,150,
        12,150,2033,9,150,1,151,1,151,3,151,2037,8,151,1,151,3,151,2040,
        8,151,1,151,1,151,3,151,2044,8,151,1,151,3,151,2047,8,151,1,151,
        3,151,2050,8,151,1,151,1,151,3,151,2054,8,151,1,152,1,152,1,152,
        1,152,1,152,5,152,2061,8,152,10,152,12,152,2064,9,152,1,153,1,153,
        1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,3,156,
        2078,8,156,1,156,1,156,1,156,1,156,3,156,2084,8,156,5,156,2086,8,
        156,10,156,12,156,2089,9,156,1,157,3,157,2092,8,157,1,157,1,157,
        3,157,2096,8,157,1,157,1,157,3,157,2100,8,157,1,157,1,157,3,157,
        2104,8,157,1,157,1,157,3,157,2108,8,157,1,157,1,157,3,157,2112,8,
        157,1,158,3,158,2115,8,158,1,158,1,158,3,158,2119,8,158,1,159,1,
        159,1,160,1,160,1,161,1,161,1,161,1,162,1,162,3,162,2130,8,162,1,
        163,1,163,3,163,2134,8,163,1,164,1,164,1,164,1,165,1,165,3,165,2141,
        8,165,1,165,1,165,3,165,2145,8,165,1,165,1,165,1,165,3,165,2150,
        8,165,1,166,1,166,1,166,3,166,2155,8,166,1,166,1,166,1,166,1,166,
        1,166,3,166,2162,8,166,1,167,1,167,3,167,2166,8,167,1,168,1,168,
        1,168,1,169,1,169,1,169,1,169,1,169,3,169,2176,8,169,1,170,1,170,
        1,170,1,170,1,170,1,170,1,171,1,171,1,171,1,171,1,171,1,171,5,171,
        2190,8,171,10,171,12,171,2193,9,171,1,172,1,172,3,172,2197,8,172,
        1,173,1,173,3,173,2201,8,173,1,173,3,173,2204,8,173,1,173,1,173,
        3,173,2208,8,173,1,173,1,173,1,173,1,173,3,173,2214,8,173,1,173,
        3,173,2217,8,173,1,173,1,173,3,173,2221,8,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,3,173,2231,8,173,1,173,3,173,2234,
        8,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2242,8,173,1,173,
        1,173,1,173,3,173,2247,8,173,1,174,1,174,1,174,3,174,2252,8,174,
        1,174,1,174,1,175,1,175,1,175,1,175,3,175,2260,8,175,1,175,1,175,
        1,175,1,175,1,175,3,175,2267,8,175,1,175,1,175,3,175,2271,8,175,
        1,176,1,176,1,177,1,177,1,177,3,177,2278,8,177,1,177,1,177,1,177,
        1,177,3,177,2284,8,177,5,177,2286,8,177,10,177,12,177,2289,9,177,
        1,178,1,178,1,178,3,178,2294,8,178,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,3,179,2303,8,179,1,179,1,179,3,179,2307,8,179,1,180,
        3,180,2310,8,180,1,180,1,180,1,180,1,181,1,181,1,181,1,181,1,181,
        1,182,1,182,1,182,1,182,1,183,1,183,3,183,2326,8,183,1,183,1,183,
        1,183,1,184,1,184,3,184,2333,8,184,1,185,1,185,1,185,1,185,1,185,
        1,185,1,186,3,186,2342,8,186,1,186,1,186,1,186,1,186,3,186,2348,
        8,186,1,186,1,186,3,186,2352,8,186,1,186,3,186,2355,8,186,1,187,
        1,187,3,187,2359,8,187,1,188,1,188,3,188,2363,8,188,1,189,1,189,
        1,189,3,189,2368,8,189,1,189,1,189,1,190,1,190,1,190,3,190,2375,
        8,190,1,190,1,190,1,190,1,190,3,190,2381,8,190,5,190,2383,8,190,
        10,190,12,190,2386,9,190,1,191,1,191,1,191,1,191,1,191,1,191,3,191,
        2394,8,191,1,192,1,192,1,192,1,193,1,193,1,193,1,193,1,194,1,194,
        1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
        1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
        1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
        1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
        1,194,1,194,3,194,2451,8,194,1,195,1,195,1,195,1,195,1,195,1,195,
        1,195,3,195,2460,8,195,1,196,1,196,1,197,1,197,1,198,1,198,1,198,
        0,34,10,20,30,48,58,60,62,64,66,68,70,72,74,76,78,86,98,116,170,
        206,212,224,228,236,258,262,266,280,300,304,312,342,354,380,199,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
        286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
        318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
        350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,
        382,384,386,388,390,392,394,396,0,11,2,0,89,89,93,93,2,0,83,85,89,
        92,5,0,28,28,39,39,49,49,55,55,62,62,3,0,26,26,36,36,72,72,2,0,14,
        14,74,74,2,0,89,89,110,110,3,0,13,13,58,58,69,69,2,0,30,30,45,45,
        1,0,46,48,2,0,29,29,64,64,1,0,134,137,2757,0,399,1,0,0,0,2,411,1,
        0,0,0,4,415,1,0,0,0,6,426,1,0,0,0,8,428,1,0,0,0,10,445,1,0,0,0,12,
        462,1,0,0,0,14,468,1,0,0,0,16,480,1,0,0,0,18,482,1,0,0,0,20,484,
        1,0,0,0,22,502,1,0,0,0,24,508,1,0,0,0,26,515,1,0,0,0,28,517,1,0,
        0,0,30,596,1,0,0,0,32,641,1,0,0,0,34,665,1,0,0,0,36,695,1,0,0,0,
        38,697,1,0,0,0,40,723,1,0,0,0,42,725,1,0,0,0,44,729,1,0,0,0,46,738,
        1,0,0,0,48,740,1,0,0,0,50,765,1,0,0,0,52,779,1,0,0,0,54,781,1,0,
        0,0,56,792,1,0,0,0,58,794,1,0,0,0,60,808,1,0,0,0,62,825,1,0,0,0,
        64,839,1,0,0,0,66,854,1,0,0,0,68,874,1,0,0,0,70,888,1,0,0,0,72,899,
        1,0,0,0,74,910,1,0,0,0,76,921,1,0,0,0,78,932,1,0,0,0,80,950,1,0,
        0,0,82,958,1,0,0,0,84,971,1,0,0,0,86,973,1,0,0,0,88,984,1,0,0,0,
        90,1012,1,0,0,0,92,1034,1,0,0,0,94,1037,1,0,0,0,96,1041,1,0,0,0,
        98,1047,1,0,0,0,100,1077,1,0,0,0,102,1095,1,0,0,0,104,1132,1,0,0,
        0,106,1136,1,0,0,0,108,1139,1,0,0,0,110,1146,1,0,0,0,112,1164,1,
        0,0,0,114,1166,1,0,0,0,116,1168,1,0,0,0,118,1187,1,0,0,0,120,1197,
        1,0,0,0,122,1199,1,0,0,0,124,1222,1,0,0,0,126,1224,1,0,0,0,128,1232,
        1,0,0,0,130,1234,1,0,0,0,132,1243,1,0,0,0,134,1252,1,0,0,0,136,1254,
        1,0,0,0,138,1256,1,0,0,0,140,1258,1,0,0,0,142,1263,1,0,0,0,144,1269,
        1,0,0,0,146,1278,1,0,0,0,148,1287,1,0,0,0,150,1312,1,0,0,0,152,1318,
        1,0,0,0,154,1329,1,0,0,0,156,1355,1,0,0,0,158,1357,1,0,0,0,160,1372,
        1,0,0,0,162,1393,1,0,0,0,164,1395,1,0,0,0,166,1410,1,0,0,0,168,1412,
        1,0,0,0,170,1415,1,0,0,0,172,1431,1,0,0,0,174,1433,1,0,0,0,176,1437,
        1,0,0,0,178,1439,1,0,0,0,180,1443,1,0,0,0,182,1447,1,0,0,0,184,1450,
        1,0,0,0,186,1459,1,0,0,0,188,1468,1,0,0,0,190,1476,1,0,0,0,192,1478,
        1,0,0,0,194,1480,1,0,0,0,196,1487,1,0,0,0,198,1504,1,0,0,0,200,1507,
        1,0,0,0,202,1517,1,0,0,0,204,1533,1,0,0,0,206,1535,1,0,0,0,208,1552,
        1,0,0,0,210,1570,1,0,0,0,212,1579,1,0,0,0,214,1596,1,0,0,0,216,1602,
        1,0,0,0,218,1604,1,0,0,0,220,1608,1,0,0,0,222,1610,1,0,0,0,224,1614,
        1,0,0,0,226,1637,1,0,0,0,228,1639,1,0,0,0,230,1650,1,0,0,0,232,1659,
        1,0,0,0,234,1665,1,0,0,0,236,1676,1,0,0,0,238,1694,1,0,0,0,240,1709,
        1,0,0,0,242,1737,1,0,0,0,244,1739,1,0,0,0,246,1743,1,0,0,0,248,1745,
        1,0,0,0,250,1748,1,0,0,0,252,1752,1,0,0,0,254,1764,1,0,0,0,256,1771,
        1,0,0,0,258,1787,1,0,0,0,260,1809,1,0,0,0,262,1811,1,0,0,0,264,1840,
        1,0,0,0,266,1842,1,0,0,0,268,1884,1,0,0,0,270,1887,1,0,0,0,272,1909,
        1,0,0,0,274,1916,1,0,0,0,276,1921,1,0,0,0,278,1925,1,0,0,0,280,1927,
        1,0,0,0,282,1952,1,0,0,0,284,1956,1,0,0,0,286,1958,1,0,0,0,288,1983,
        1,0,0,0,290,1986,1,0,0,0,292,1990,1,0,0,0,294,1992,1,0,0,0,296,2003,
        1,0,0,0,298,2021,1,0,0,0,300,2023,1,0,0,0,302,2053,1,0,0,0,304,2055,
        1,0,0,0,306,2065,1,0,0,0,308,2067,1,0,0,0,310,2071,1,0,0,0,312,2074,
        1,0,0,0,314,2111,1,0,0,0,316,2118,1,0,0,0,318,2120,1,0,0,0,320,2122,
        1,0,0,0,322,2124,1,0,0,0,324,2127,1,0,0,0,326,2131,1,0,0,0,328,2135,
        1,0,0,0,330,2149,1,0,0,0,332,2161,1,0,0,0,334,2165,1,0,0,0,336,2167,
        1,0,0,0,338,2175,1,0,0,0,340,2177,1,0,0,0,342,2183,1,0,0,0,344,2196,
        1,0,0,0,346,2246,1,0,0,0,348,2248,1,0,0,0,350,2270,1,0,0,0,352,2272,
        1,0,0,0,354,2274,1,0,0,0,356,2293,1,0,0,0,358,2306,1,0,0,0,360,2309,
        1,0,0,0,362,2314,1,0,0,0,364,2319,1,0,0,0,366,2323,1,0,0,0,368,2330,
        1,0,0,0,370,2334,1,0,0,0,372,2354,1,0,0,0,374,2356,1,0,0,0,376,2362,
        1,0,0,0,378,2364,1,0,0,0,380,2371,1,0,0,0,382,2393,1,0,0,0,384,2395,
        1,0,0,0,386,2398,1,0,0,0,388,2450,1,0,0,0,390,2459,1,0,0,0,392,2461,
        1,0,0,0,394,2463,1,0,0,0,396,2465,1,0,0,0,398,400,3,116,58,0,399,
        398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,5,0,0,1,402,
        1,1,0,0,0,403,412,3,390,195,0,404,412,5,61,0,0,405,406,5,77,0,0,
        406,407,3,86,43,0,407,408,5,78,0,0,408,412,1,0,0,0,409,412,3,4,2,
        0,410,412,3,12,6,0,411,403,1,0,0,0,411,404,1,0,0,0,411,405,1,0,0,
        0,411,409,1,0,0,0,411,410,1,0,0,0,412,3,1,0,0,0,413,416,3,6,3,0,
        414,416,3,8,4,0,415,413,1,0,0,0,415,414,1,0,0,0,416,5,1,0,0,0,417,
        427,5,124,0,0,418,427,3,336,168,0,419,427,3,322,161,0,420,427,3,
        338,169,0,421,422,5,91,0,0,422,427,3,284,142,0,423,424,5,91,0,0,
        424,427,3,154,77,0,425,427,3,350,175,0,426,417,1,0,0,0,426,418,1,
        0,0,0,426,419,1,0,0,0,426,420,1,0,0,0,426,421,1,0,0,0,426,423,1,
        0,0,0,426,425,1,0,0,0,427,7,1,0,0,0,428,430,3,10,5,0,429,431,5,60,
        0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,3,6,
        3,0,433,9,1,0,0,0,434,435,6,5,-1,0,435,446,5,119,0,0,436,437,3,152,
        76,0,437,438,5,119,0,0,438,446,1,0,0,0,439,440,3,176,88,0,440,441,
        5,119,0,0,441,446,1,0,0,0,442,443,3,154,77,0,443,444,5,119,0,0,444,
        446,1,0,0,0,445,434,1,0,0,0,445,436,1,0,0,0,445,439,1,0,0,0,445,
        442,1,0,0,0,446,459,1,0,0,0,447,448,10,2,0,0,448,449,5,124,0,0,449,
        458,5,119,0,0,450,452,10,1,0,0,451,453,5,60,0,0,452,451,1,0,0,0,
        452,453,1,0,0,0,453,454,1,0,0,0,454,455,3,348,174,0,455,456,5,119,
        0,0,456,458,1,0,0,0,457,447,1,0,0,0,457,450,1,0,0,0,458,461,1,0,
        0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,11,1,0,0,0,461,459,1,0,0,
        0,462,464,3,14,7,0,463,465,3,28,14,0,464,463,1,0,0,0,464,465,1,0,
        0,0,465,466,1,0,0,0,466,467,3,96,48,0,467,13,1,0,0,0,468,470,5,79,
        0,0,469,471,3,16,8,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,
        0,0,472,473,5,80,0,0,473,15,1,0,0,0,474,481,3,18,9,0,475,481,3,20,
        10,0,476,477,3,18,9,0,477,478,5,114,0,0,478,479,3,20,10,0,479,481,
        1,0,0,0,480,474,1,0,0,0,480,475,1,0,0,0,480,476,1,0,0,0,481,17,1,
        0,0,0,482,483,7,0,0,0,483,19,1,0,0,0,484,485,6,10,-1,0,485,487,3,
        22,11,0,486,488,5,123,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,497,
        1,0,0,0,489,490,10,1,0,0,490,491,5,114,0,0,491,493,3,22,11,0,492,
        494,5,123,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,
        489,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,
        21,1,0,0,0,499,497,1,0,0,0,500,503,3,24,12,0,501,503,3,26,13,0,502,
        500,1,0,0,0,502,501,1,0,0,0,503,23,1,0,0,0,504,509,5,124,0,0,505,
        506,5,89,0,0,506,509,5,124,0,0,507,509,5,61,0,0,508,504,1,0,0,0,
        508,505,1,0,0,0,508,507,1,0,0,0,509,25,1,0,0,0,510,511,5,124,0,0,
        511,516,3,274,137,0,512,513,5,89,0,0,513,514,5,124,0,0,514,516,3,
        274,137,0,515,510,1,0,0,0,515,512,1,0,0,0,516,27,1,0,0,0,517,518,
        5,77,0,0,518,519,3,264,132,0,519,521,5,78,0,0,520,522,5,39,0,0,521,
        520,1,0,0,0,521,522,1,0,0,0,522,524,1,0,0,0,523,525,3,376,188,0,
        524,523,1,0,0,0,524,525,1,0,0,0,525,527,1,0,0,0,526,528,3,206,103,
        0,527,526,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,531,3,240,
        120,0,530,529,1,0,0,0,530,531,1,0,0,0,531,29,1,0,0,0,532,533,6,15,
        -1,0,533,597,3,2,1,0,534,535,3,150,75,0,535,537,5,77,0,0,536,538,
        3,32,16,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,
        5,78,0,0,540,597,1,0,0,0,541,542,3,358,179,0,542,544,5,77,0,0,543,
        545,3,32,16,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,
        547,5,78,0,0,547,597,1,0,0,0,548,549,3,150,75,0,549,550,3,282,141,
        0,550,597,1,0,0,0,551,552,3,358,179,0,552,553,3,282,141,0,553,597,
        1,0,0,0,554,555,5,23,0,0,555,556,5,94,0,0,556,557,3,252,126,0,557,
        558,5,95,0,0,558,559,5,77,0,0,559,560,3,86,43,0,560,561,5,78,0,0,
        561,597,1,0,0,0,562,563,5,57,0,0,563,564,5,94,0,0,564,565,3,252,
        126,0,565,566,5,95,0,0,566,567,5,77,0,0,567,568,3,86,43,0,568,569,
        5,78,0,0,569,597,1,0,0,0,570,571,5,50,0,0,571,572,5,94,0,0,572,573,
        3,252,126,0,573,574,5,95,0,0,574,575,5,77,0,0,575,576,3,86,43,0,
        576,577,5,78,0,0,577,597,1,0,0,0,578,579,5,16,0,0,579,580,5,94,0,
        0,580,581,3,252,126,0,581,582,5,95,0,0,582,583,5,77,0,0,583,584,
        3,86,43,0,584,585,5,78,0,0,585,597,1,0,0,0,586,587,5,67,0,0,587,
        588,5,77,0,0,588,589,3,86,43,0,589,590,5,78,0,0,590,597,1,0,0,0,
        591,592,5,67,0,0,592,593,5,77,0,0,593,594,3,252,126,0,594,595,5,
        78,0,0,595,597,1,0,0,0,596,532,1,0,0,0,596,534,1,0,0,0,596,541,1,
        0,0,0,596,548,1,0,0,0,596,551,1,0,0,0,596,554,1,0,0,0,596,562,1,
        0,0,0,596,570,1,0,0,0,596,578,1,0,0,0,596,586,1,0,0,0,596,591,1,
        0,0,0,597,638,1,0,0,0,598,599,10,19,0,0,599,600,5,79,0,0,600,601,
        3,86,43,0,601,602,5,80,0,0,602,637,1,0,0,0,603,604,10,18,0,0,604,
        605,5,79,0,0,605,606,3,282,141,0,606,607,5,80,0,0,607,637,1,0,0,
        0,608,609,10,17,0,0,609,611,5,77,0,0,610,612,3,32,16,0,611,610,1,
        0,0,0,611,612,1,0,0,0,612,613,1,0,0,0,613,637,5,78,0,0,614,615,10,
        12,0,0,615,617,5,121,0,0,616,618,5,60,0,0,617,616,1,0,0,0,617,618,
        1,0,0,0,618,619,1,0,0,0,619,637,3,4,2,0,620,621,10,11,0,0,621,623,
        5,116,0,0,622,624,5,60,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,625,
        1,0,0,0,625,637,3,4,2,0,626,627,10,10,0,0,627,628,5,121,0,0,628,
        637,3,34,17,0,629,630,10,9,0,0,630,631,5,116,0,0,631,637,3,34,17,
        0,632,633,10,8,0,0,633,637,5,112,0,0,634,635,10,7,0,0,635,637,5,
        113,0,0,636,598,1,0,0,0,636,603,1,0,0,0,636,608,1,0,0,0,636,614,
        1,0,0,0,636,620,1,0,0,0,636,626,1,0,0,0,636,629,1,0,0,0,636,632,
        1,0,0,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,
        1,0,0,0,639,31,1,0,0,0,640,638,1,0,0,0,641,642,3,280,140,0,642,33,
        1,0,0,0,643,645,3,10,5,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,
        1,0,0,0,646,647,3,152,76,0,647,648,5,119,0,0,648,649,5,91,0,0,649,
        650,3,152,76,0,650,666,1,0,0,0,651,652,3,10,5,0,652,653,5,60,0,0,
        653,654,3,348,174,0,654,655,5,119,0,0,655,656,5,91,0,0,656,657,3,
        152,76,0,657,666,1,0,0,0,658,660,3,10,5,0,659,658,1,0,0,0,659,660,
        1,0,0,0,660,661,1,0,0,0,661,662,5,91,0,0,662,666,3,152,76,0,663,
        664,5,91,0,0,664,666,3,154,77,0,665,644,1,0,0,0,665,651,1,0,0,0,
        665,659,1,0,0,0,665,663,1,0,0,0,666,35,1,0,0,0,667,696,3,30,15,0,
        668,669,5,112,0,0,669,696,3,56,28,0,670,671,5,113,0,0,671,696,3,
        56,28,0,672,673,3,38,19,0,673,674,3,56,28,0,674,696,1,0,0,0,675,
        676,5,54,0,0,676,696,3,36,18,0,677,678,5,54,0,0,678,679,5,77,0,0,
        679,680,3,252,126,0,680,681,5,78,0,0,681,696,1,0,0,0,682,683,5,54,
        0,0,683,684,5,123,0,0,684,685,5,77,0,0,685,686,5,124,0,0,686,696,
        5,78,0,0,687,688,5,3,0,0,688,689,5,77,0,0,689,690,3,252,126,0,690,
        691,5,78,0,0,691,696,1,0,0,0,692,696,3,54,27,0,693,696,3,40,20,0,
        694,696,3,52,26,0,695,667,1,0,0,0,695,668,1,0,0,0,695,670,1,0,0,
        0,695,672,1,0,0,0,695,675,1,0,0,0,695,677,1,0,0,0,695,682,1,0,0,
        0,695,687,1,0,0,0,695,692,1,0,0,0,695,693,1,0,0,0,695,694,1,0,0,
        0,696,37,1,0,0,0,697,698,7,1,0,0,698,39,1,0,0,0,699,701,5,119,0,
        0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,704,5,41,0,
        0,703,705,3,42,21,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,
        0,0,706,708,3,44,22,0,707,709,3,50,25,0,708,707,1,0,0,0,708,709,
        1,0,0,0,709,724,1,0,0,0,710,712,5,119,0,0,711,710,1,0,0,0,711,712,
        1,0,0,0,712,713,1,0,0,0,713,715,5,41,0,0,714,716,3,42,21,0,715,714,
        1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,718,5,77,0,0,718,719,
        3,252,126,0,719,721,5,78,0,0,720,722,3,50,25,0,721,720,1,0,0,0,721,
        722,1,0,0,0,722,724,1,0,0,0,723,700,1,0,0,0,723,711,1,0,0,0,724,
        41,1,0,0,0,725,726,5,77,0,0,726,727,3,32,16,0,727,728,5,78,0,0,728,
        43,1,0,0,0,729,731,3,146,73,0,730,732,3,46,23,0,731,730,1,0,0,0,
        731,732,1,0,0,0,732,45,1,0,0,0,733,735,3,242,121,0,734,736,3,46,
        23,0,735,734,1,0,0,0,735,736,1,0,0,0,736,739,1,0,0,0,737,739,3,48,
        24,0,738,733,1,0,0,0,738,737,1,0,0,0,739,47,1,0,0,0,740,741,6,24,
        -1,0,741,742,5,79,0,0,742,743,3,86,43,0,743,745,5,80,0,0,744,746,
        3,206,103,0,745,744,1,0,0,0,745,746,1,0,0,0,746,756,1,0,0,0,747,
        748,10,1,0,0,748,749,5,79,0,0,749,750,3,88,44,0,750,752,5,80,0,0,
        751,753,3,206,103,0,752,751,1,0,0,0,752,753,1,0,0,0,753,755,1,0,
        0,0,754,747,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,0,
        0,0,757,49,1,0,0,0,758,756,1,0,0,0,759,761,5,77,0,0,760,762,3,32,
        16,0,761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,766,5,78,
        0,0,764,766,3,282,141,0,765,759,1,0,0,0,765,764,1,0,0,0,766,51,1,
        0,0,0,767,769,5,119,0,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,
        1,0,0,0,770,771,5,20,0,0,771,780,3,56,28,0,772,774,5,119,0,0,773,
        772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,5,20,0,0,776,
        777,5,79,0,0,777,778,5,80,0,0,778,780,3,56,28,0,779,768,1,0,0,0,
        779,773,1,0,0,0,780,53,1,0,0,0,781,782,5,42,0,0,782,783,5,77,0,0,
        783,784,3,86,43,0,784,785,5,78,0,0,785,55,1,0,0,0,786,793,3,36,18,
        0,787,788,5,77,0,0,788,789,3,252,126,0,789,790,5,78,0,0,790,791,
        3,56,28,0,791,793,1,0,0,0,792,786,1,0,0,0,792,787,1,0,0,0,793,57,
        1,0,0,0,794,795,6,29,-1,0,795,796,3,56,28,0,796,805,1,0,0,0,797,
        798,10,2,0,0,798,799,5,122,0,0,799,804,3,56,28,0,800,801,10,1,0,
        0,801,802,5,115,0,0,802,804,3,56,28,0,803,797,1,0,0,0,803,800,1,
        0,0,0,804,807,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,59,1,0,
        0,0,807,805,1,0,0,0,808,809,6,30,-1,0,809,810,3,58,29,0,810,822,
        1,0,0,0,811,812,10,3,0,0,812,813,5,85,0,0,813,821,3,58,29,0,814,
        815,10,2,0,0,815,816,5,86,0,0,816,821,3,58,29,0,817,818,10,1,0,0,
        818,819,5,87,0,0,819,821,3,58,29,0,820,811,1,0,0,0,820,814,1,0,0,
        0,820,817,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,1,0,0,
        0,823,61,1,0,0,0,824,822,1,0,0,0,825,826,6,31,-1,0,826,827,3,60,
        30,0,827,836,1,0,0,0,828,829,10,2,0,0,829,830,5,83,0,0,830,835,3,
        60,30,0,831,832,10,1,0,0,832,833,5,84,0,0,833,835,3,60,30,0,834,
        828,1,0,0,0,834,831,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,836,
        837,1,0,0,0,837,63,1,0,0,0,838,836,1,0,0,0,839,840,6,32,-1,0,840,
        841,3,62,31,0,841,851,1,0,0,0,842,843,10,2,0,0,843,844,5,104,0,0,
        844,850,3,62,31,0,845,846,10,1,0,0,846,847,3,384,192,0,847,848,3,
        62,31,0,848,850,1,0,0,0,849,842,1,0,0,0,849,845,1,0,0,0,850,853,
        1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,65,1,0,0,0,853,851,1,
        0,0,0,854,855,6,33,-1,0,855,856,3,64,32,0,856,871,1,0,0,0,857,858,
        10,4,0,0,858,859,5,94,0,0,859,870,3,64,32,0,860,861,10,3,0,0,861,
        862,5,95,0,0,862,870,3,64,32,0,863,864,10,2,0,0,864,865,5,108,0,
        0,865,870,3,64,32,0,866,867,10,1,0,0,867,868,5,109,0,0,868,870,3,
        64,32,0,869,857,1,0,0,0,869,860,1,0,0,0,869,863,1,0,0,0,869,866,
        1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,67,1,
        0,0,0,873,871,1,0,0,0,874,875,6,34,-1,0,875,876,3,66,33,0,876,885,
        1,0,0,0,877,878,10,2,0,0,878,879,5,106,0,0,879,884,3,66,33,0,880,
        881,10,1,0,0,881,882,5,107,0,0,882,884,3,66,33,0,883,877,1,0,0,0,
        883,880,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,
        886,69,1,0,0,0,887,885,1,0,0,0,888,889,6,35,-1,0,889,890,3,68,34,
        0,890,896,1,0,0,0,891,892,10,1,0,0,892,893,5,89,0,0,893,895,3,68,
        34,0,894,891,1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,
        0,0,897,71,1,0,0,0,898,896,1,0,0,0,899,900,6,36,-1,0,900,901,3,70,
        35,0,901,907,1,0,0,0,902,903,10,1,0,0,903,904,5,88,0,0,904,906,3,
        70,35,0,905,902,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,
        1,0,0,0,908,73,1,0,0,0,909,907,1,0,0,0,910,911,6,37,-1,0,911,912,
        3,72,36,0,912,918,1,0,0,0,913,914,10,1,0,0,914,915,5,90,0,0,915,
        917,3,72,36,0,916,913,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,
        919,1,0,0,0,919,75,1,0,0,0,920,918,1,0,0,0,921,922,6,38,-1,0,922,
        923,3,74,37,0,923,929,1,0,0,0,924,925,10,1,0,0,925,926,5,110,0,0,
        926,928,3,74,37,0,927,924,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,
        0,929,930,1,0,0,0,930,77,1,0,0,0,931,929,1,0,0,0,932,933,6,39,-1,
        0,933,934,3,76,38,0,934,940,1,0,0,0,935,936,10,1,0,0,936,937,5,111,
        0,0,937,939,3,76,38,0,938,935,1,0,0,0,939,942,1,0,0,0,940,938,1,
        0,0,0,940,941,1,0,0,0,941,79,1,0,0,0,942,940,1,0,0,0,943,951,3,78,
        39,0,944,945,3,78,39,0,945,946,5,117,0,0,946,947,3,86,43,0,947,948,
        5,118,0,0,948,949,3,82,41,0,949,951,1,0,0,0,950,943,1,0,0,0,950,
        944,1,0,0,0,951,81,1,0,0,0,952,959,3,80,40,0,953,954,3,78,39,0,954,
        955,3,84,42,0,955,956,3,278,139,0,956,959,1,0,0,0,957,959,3,374,
        187,0,958,952,1,0,0,0,958,953,1,0,0,0,958,957,1,0,0,0,959,83,1,0,
        0,0,960,972,5,93,0,0,961,972,5,98,0,0,962,972,5,99,0,0,963,972,5,
        100,0,0,964,972,5,96,0,0,965,972,5,97,0,0,966,972,3,386,193,0,967,
        972,5,105,0,0,968,972,5,102,0,0,969,972,5,101,0,0,970,972,5,103,
        0,0,971,960,1,0,0,0,971,961,1,0,0,0,971,962,1,0,0,0,971,963,1,0,
        0,0,971,964,1,0,0,0,971,965,1,0,0,0,971,966,1,0,0,0,971,967,1,0,
        0,0,971,968,1,0,0,0,971,969,1,0,0,0,971,970,1,0,0,0,972,85,1,0,0,
        0,973,974,6,43,-1,0,974,975,3,82,41,0,975,981,1,0,0,0,976,977,10,
        1,0,0,977,978,5,114,0,0,978,980,3,82,41,0,979,976,1,0,0,0,980,983,
        1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,87,1,0,0,0,983,981,1,
        0,0,0,984,985,3,80,40,0,985,89,1,0,0,0,986,1013,3,92,46,0,987,989,
        3,206,103,0,988,987,1,0,0,0,988,989,1,0,0,0,989,990,1,0,0,0,990,
        1013,3,94,47,0,991,993,3,206,103,0,992,991,1,0,0,0,992,993,1,0,0,
        0,993,994,1,0,0,0,994,1013,3,96,48,0,995,997,3,206,103,0,996,995,
        1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,1013,3,100,50,0,999,
        1001,3,206,103,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,
        0,0,0,1002,1013,3,104,52,0,1003,1005,3,206,103,0,1004,1003,1,0,0,
        0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1013,3,112,56,0,1007,
        1013,3,114,57,0,1008,1010,3,206,103,0,1009,1008,1,0,0,0,1009,1010,
        1,0,0,0,1010,1011,1,0,0,0,1011,1013,3,364,182,0,1012,986,1,0,0,0,
        1012,988,1,0,0,0,1012,992,1,0,0,0,1012,996,1,0,0,0,1012,1000,1,0,
        0,0,1012,1004,1,0,0,0,1012,1007,1,0,0,0,1012,1009,1,0,0,0,1013,91,
        1,0,0,0,1014,1016,3,206,103,0,1015,1014,1,0,0,0,1015,1016,1,0,0,
        0,1016,1017,1,0,0,0,1017,1018,5,124,0,0,1018,1019,5,118,0,0,1019,
        1035,3,90,45,0,1020,1022,3,206,103,0,1021,1020,1,0,0,0,1021,1022,
        1,0,0,0,1022,1023,1,0,0,0,1023,1024,5,8,0,0,1024,1025,3,88,44,0,
        1025,1026,5,118,0,0,1026,1027,3,90,45,0,1027,1035,1,0,0,0,1028,1030,
        3,206,103,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,
        0,1031,1032,5,19,0,0,1032,1033,5,118,0,0,1033,1035,3,90,45,0,1034,
        1015,1,0,0,0,1034,1021,1,0,0,0,1034,1029,1,0,0,0,1035,93,1,0,0,0,
        1036,1038,3,86,43,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,
        1,0,0,0,1039,1040,5,120,0,0,1040,95,1,0,0,0,1041,1043,5,81,0,0,1042,
        1044,3,98,49,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,
        0,0,1045,1046,5,82,0,0,1046,97,1,0,0,0,1047,1048,6,49,-1,0,1048,
        1049,3,90,45,0,1049,1054,1,0,0,0,1050,1051,10,1,0,0,1051,1053,3,
        90,45,0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,
        1055,1,0,0,0,1055,99,1,0,0,0,1056,1054,1,0,0,0,1057,1058,5,35,0,
        0,1058,1059,5,77,0,0,1059,1060,3,102,51,0,1060,1061,5,78,0,0,1061,
        1062,3,90,45,0,1062,1078,1,0,0,0,1063,1064,5,35,0,0,1064,1065,5,
        77,0,0,1065,1066,3,102,51,0,1066,1067,5,78,0,0,1067,1068,3,90,45,
        0,1068,1069,5,24,0,0,1069,1070,3,90,45,0,1070,1078,1,0,0,0,1071,
        1072,5,59,0,0,1072,1073,5,77,0,0,1073,1074,3,102,51,0,1074,1075,
        5,78,0,0,1075,1076,3,90,45,0,1076,1078,1,0,0,0,1077,1057,1,0,0,0,
        1077,1063,1,0,0,0,1077,1071,1,0,0,0,1078,101,1,0,0,0,1079,1096,3,
        86,43,0,1080,1082,3,206,103,0,1081,1080,1,0,0,0,1081,1082,1,0,0,
        0,1082,1083,1,0,0,0,1083,1084,3,134,67,0,1084,1085,3,232,116,0,1085,
        1086,5,93,0,0,1086,1087,3,278,139,0,1087,1096,1,0,0,0,1088,1090,
        3,206,103,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,
        0,1091,1092,3,134,67,0,1092,1093,3,232,116,0,1093,1094,3,282,141,
        0,1094,1096,1,0,0,0,1095,1079,1,0,0,0,1095,1081,1,0,0,0,1095,1089,
        1,0,0,0,1096,103,1,0,0,0,1097,1098,5,76,0,0,1098,1099,5,77,0,0,1099,
        1100,3,102,51,0,1100,1101,5,78,0,0,1101,1102,3,90,45,0,1102,1133,
        1,0,0,0,1103,1104,5,21,0,0,1104,1105,3,90,45,0,1105,1106,5,76,0,
        0,1106,1107,5,77,0,0,1107,1108,3,86,43,0,1108,1109,5,78,0,0,1109,
        1110,5,120,0,0,1110,1133,1,0,0,0,1111,1112,5,32,0,0,1112,1113,5,
        77,0,0,1113,1115,3,106,53,0,1114,1116,3,102,51,0,1115,1114,1,0,0,
        0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,1119,5,120,0,0,1118,1120,
        3,86,43,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,1,0,0,0,
        1121,1122,5,78,0,0,1122,1123,3,90,45,0,1123,1133,1,0,0,0,1124,1125,
        5,32,0,0,1125,1126,5,77,0,0,1126,1127,3,108,54,0,1127,1128,5,118,
        0,0,1128,1129,3,110,55,0,1129,1130,5,78,0,0,1130,1131,3,90,45,0,
        1131,1133,1,0,0,0,1132,1097,1,0,0,0,1132,1103,1,0,0,0,1132,1111,
        1,0,0,0,1132,1124,1,0,0,0,1133,105,1,0,0,0,1134,1137,3,94,47,0,1135,
        1137,3,124,62,0,1136,1134,1,0,0,0,1136,1135,1,0,0,0,1137,107,1,0,
        0,0,1138,1140,3,206,103,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,
        1141,1,0,0,0,1141,1142,3,134,67,0,1142,1143,3,232,116,0,1143,109,
        1,0,0,0,1144,1147,3,86,43,0,1145,1147,3,282,141,0,1146,1144,1,0,
        0,0,1146,1145,1,0,0,0,1147,111,1,0,0,0,1148,1149,5,7,0,0,1149,1165,
        5,120,0,0,1150,1151,5,17,0,0,1151,1165,5,120,0,0,1152,1154,5,51,
        0,0,1153,1155,3,86,43,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,
        1156,1,0,0,0,1156,1165,5,120,0,0,1157,1158,5,51,0,0,1158,1159,3,
        282,141,0,1159,1160,5,120,0,0,1160,1165,1,0,0,0,1161,1162,5,34,0,
        0,1162,1163,5,124,0,0,1163,1165,5,120,0,0,1164,1148,1,0,0,0,1164,
        1150,1,0,0,0,1164,1152,1,0,0,0,1164,1157,1,0,0,0,1164,1161,1,0,0,
        0,1165,113,1,0,0,0,1166,1167,3,120,60,0,1167,115,1,0,0,0,1168,1169,
        6,58,-1,0,1169,1170,3,118,59,0,1170,1175,1,0,0,0,1171,1172,10,1,
        0,0,1172,1174,3,118,59,0,1173,1171,1,0,0,0,1174,1177,1,0,0,0,1175,
        1173,1,0,0,0,1175,1176,1,0,0,0,1176,117,1,0,0,0,1177,1175,1,0,0,
        0,1178,1188,3,120,60,0,1179,1188,3,270,135,0,1180,1188,3,340,170,
        0,1181,1188,3,360,180,0,1182,1188,3,362,181,0,1183,1188,3,204,102,
        0,1184,1188,3,180,90,0,1185,1188,3,128,64,0,1186,1188,3,130,65,0,
        1187,1178,1,0,0,0,1187,1179,1,0,0,0,1187,1180,1,0,0,0,1187,1181,
        1,0,0,0,1187,1182,1,0,0,0,1187,1183,1,0,0,0,1187,1184,1,0,0,0,1187,
        1185,1,0,0,0,1187,1186,1,0,0,0,1188,119,1,0,0,0,1189,1198,3,124,
        62,0,1190,1198,3,202,101,0,1191,1198,3,194,97,0,1192,1198,3,198,
        99,0,1193,1198,3,200,100,0,1194,1198,3,126,63,0,1195,1198,3,122,
        61,0,1196,1198,3,164,82,0,1197,1189,1,0,0,0,1197,1190,1,0,0,0,1197,
        1191,1,0,0,0,1197,1192,1,0,0,0,1197,1193,1,0,0,0,1197,1194,1,0,0,
        0,1197,1195,1,0,0,0,1197,1196,1,0,0,0,1198,121,1,0,0,0,1199,1200,
        5,71,0,0,1200,1202,5,124,0,0,1201,1203,3,206,103,0,1202,1201,1,0,
        0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1205,5,93,0,0,1205,
        1206,3,252,126,0,1206,1207,5,120,0,0,1207,123,1,0,0,0,1208,1210,
        3,134,67,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,1212,1,0,0,0,
        1211,1213,3,228,114,0,1212,1211,1,0,0,0,1212,1213,1,0,0,0,1213,1214,
        1,0,0,0,1214,1223,5,120,0,0,1215,1217,3,206,103,0,1216,1218,3,134,
        67,0,1217,1216,1,0,0,0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,1219,
        1220,3,228,114,0,1220,1221,5,120,0,0,1221,1223,1,0,0,0,1222,1209,
        1,0,0,0,1222,1215,1,0,0,0,1223,125,1,0,0,0,1224,1225,5,56,0,0,1225,
        1226,5,77,0,0,1226,1227,3,88,44,0,1227,1228,5,114,0,0,1228,1229,
        5,133,0,0,1229,1230,5,78,0,0,1230,1231,5,120,0,0,1231,127,1,0,0,
        0,1232,1233,5,120,0,0,1233,129,1,0,0,0,1234,1235,3,206,103,0,1235,
        1236,5,120,0,0,1236,131,1,0,0,0,1237,1244,3,136,68,0,1238,1244,3,
        142,71,0,1239,1244,3,138,69,0,1240,1244,5,33,0,0,1241,1244,5,66,
        0,0,1242,1244,5,15,0,0,1243,1237,1,0,0,0,1243,1238,1,0,0,0,1243,
        1239,1,0,0,0,1243,1240,1,0,0,0,1243,1241,1,0,0,0,1243,1242,1,0,0,
        0,1244,133,1,0,0,0,1245,1247,3,132,66,0,1246,1248,3,206,103,0,1247,
        1246,1,0,0,0,1247,1248,1,0,0,0,1248,1253,1,0,0,0,1249,1250,3,132,
        66,0,1250,1251,3,134,67,0,1251,1253,1,0,0,0,1252,1245,1,0,0,0,1252,
        1249,1,0,0,0,1253,135,1,0,0,0,1254,1255,7,2,0,0,1255,137,1,0,0,0,
        1256,1257,7,3,0,0,1257,139,1,0,0,0,1258,1259,5,124,0,0,1259,141,
        1,0,0,0,1260,1264,3,144,72,0,1261,1264,3,286,143,0,1262,1264,3,160,
        80,0,1263,1260,1,0,0,0,1263,1261,1,0,0,0,1263,1262,1,0,0,0,1264,
        143,1,0,0,0,1265,1270,3,150,75,0,1266,1270,3,156,78,0,1267,1270,
        3,358,179,0,1268,1270,3,246,123,0,1269,1265,1,0,0,0,1269,1266,1,
        0,0,0,1269,1267,1,0,0,0,1269,1268,1,0,0,0,1270,145,1,0,0,0,1271,
        1273,3,142,71,0,1272,1274,3,206,103,0,1273,1272,1,0,0,0,1273,1274,
        1,0,0,0,1274,1279,1,0,0,0,1275,1276,3,142,71,0,1276,1277,3,146,73,
        0,1277,1279,1,0,0,0,1278,1271,1,0,0,0,1278,1275,1,0,0,0,1279,147,
        1,0,0,0,1280,1282,3,144,72,0,1281,1283,3,206,103,0,1282,1281,1,0,
        0,0,1282,1283,1,0,0,0,1283,1288,1,0,0,0,1284,1285,3,144,72,0,1285,
        1286,3,148,74,0,1286,1288,1,0,0,0,1287,1280,1,0,0,0,1287,1284,1,
        0,0,0,1288,149,1,0,0,0,1289,1291,3,10,5,0,1290,1289,1,0,0,0,1290,
        1291,1,0,0,0,1291,1292,1,0,0,0,1292,1313,3,152,76,0,1293,1294,3,
        10,5,0,1294,1295,5,60,0,0,1295,1296,3,348,174,0,1296,1313,1,0,0,
        0,1297,1313,5,10,0,0,1298,1313,5,11,0,0,1299,1313,5,12,0,0,1300,
        1313,5,75,0,0,1301,1313,5,6,0,0,1302,1313,5,52,0,0,1303,1313,5,37,
        0,0,1304,1313,5,38,0,0,1305,1313,5,53,0,0,1306,1313,5,70,0,0,1307,
        1313,5,31,0,0,1308,1313,5,22,0,0,1309,1313,5,73,0,0,1310,1313,5,
        5,0,0,1311,1313,3,154,77,0,1312,1290,1,0,0,0,1312,1293,1,0,0,0,1312,
        1297,1,0,0,0,1312,1298,1,0,0,0,1312,1299,1,0,0,0,1312,1300,1,0,0,
        0,1312,1301,1,0,0,0,1312,1302,1,0,0,0,1312,1303,1,0,0,0,1312,1304,
        1,0,0,0,1312,1305,1,0,0,0,1312,1306,1,0,0,0,1312,1307,1,0,0,0,1312,
        1308,1,0,0,0,1312,1309,1,0,0,0,1312,1310,1,0,0,0,1312,1311,1,0,0,
        0,1313,151,1,0,0,0,1314,1319,3,284,142,0,1315,1319,3,158,79,0,1316,
        1319,3,140,70,0,1317,1319,3,348,174,0,1318,1314,1,0,0,0,1318,1315,
        1,0,0,0,1318,1316,1,0,0,0,1318,1317,1,0,0,0,1319,153,1,0,0,0,1320,
        1321,5,18,0,0,1321,1322,5,77,0,0,1322,1323,3,86,43,0,1323,1324,5,
        78,0,0,1324,1330,1,0,0,0,1325,1326,5,18,0,0,1326,1327,5,77,0,0,1327,
        1328,5,5,0,0,1328,1330,5,78,0,0,1329,1320,1,0,0,0,1329,1325,1,0,
        0,0,1330,155,1,0,0,0,1331,1333,3,294,147,0,1332,1334,3,206,103,0,
        1333,1332,1,0,0,0,1333,1334,1,0,0,0,1334,1336,1,0,0,0,1335,1337,
        3,10,5,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,
        1339,5,124,0,0,1339,1356,1,0,0,0,1340,1341,3,294,147,0,1341,1342,
        3,348,174,0,1342,1356,1,0,0,0,1343,1344,3,294,147,0,1344,1346,3,
        10,5,0,1345,1347,5,60,0,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,
        1348,1,0,0,0,1348,1349,3,348,174,0,1349,1356,1,0,0,0,1350,1352,5,
        25,0,0,1351,1353,3,10,5,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,
        1354,1,0,0,0,1354,1356,5,124,0,0,1355,1331,1,0,0,0,1355,1340,1,0,
        0,0,1355,1343,1,0,0,0,1355,1350,1,0,0,0,1356,157,1,0,0,0,1357,1358,
        5,124,0,0,1358,159,1,0,0,0,1359,1360,3,162,81,0,1360,1362,5,81,0,
        0,1361,1363,3,170,85,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,
        1364,1,0,0,0,1364,1365,5,82,0,0,1365,1373,1,0,0,0,1366,1367,3,162,
        81,0,1367,1368,5,81,0,0,1368,1369,3,170,85,0,1369,1370,5,114,0,0,
        1370,1371,5,82,0,0,1371,1373,1,0,0,0,1372,1359,1,0,0,0,1372,1366,
        1,0,0,0,1373,161,1,0,0,0,1374,1376,3,166,83,0,1375,1377,3,206,103,
        0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1379,1,0,0,0,1378,1380,
        5,124,0,0,1379,1378,1,0,0,0,1379,1380,1,0,0,0,1380,1382,1,0,0,0,
        1381,1383,3,168,84,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1394,
        1,0,0,0,1384,1386,3,166,83,0,1385,1387,3,206,103,0,1386,1385,1,0,
        0,0,1386,1387,1,0,0,0,1387,1388,1,0,0,0,1388,1389,3,10,5,0,1389,
        1391,5,124,0,0,1390,1392,3,168,84,0,1391,1390,1,0,0,0,1391,1392,
        1,0,0,0,1392,1394,1,0,0,0,1393,1374,1,0,0,0,1393,1384,1,0,0,0,1394,
        163,1,0,0,0,1395,1397,3,166,83,0,1396,1398,3,206,103,0,1397,1396,
        1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,0,1399,1401,5,124,0,0,
        1400,1402,3,168,84,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1403,
        1,0,0,0,1403,1404,5,120,0,0,1404,165,1,0,0,0,1405,1411,5,25,0,0,
        1406,1407,5,25,0,0,1407,1411,5,13,0,0,1408,1409,5,25,0,0,1409,1411,
        5,58,0,0,1410,1405,1,0,0,0,1410,1406,1,0,0,0,1410,1408,1,0,0,0,1411,
        167,1,0,0,0,1412,1413,5,118,0,0,1413,1414,3,146,73,0,1414,169,1,
        0,0,0,1415,1416,6,85,-1,0,1416,1417,3,172,86,0,1417,1423,1,0,0,0,
        1418,1419,10,1,0,0,1419,1420,5,114,0,0,1420,1422,3,172,86,0,1421,
        1418,1,0,0,0,1422,1425,1,0,0,0,1423,1421,1,0,0,0,1423,1424,1,0,0,
        0,1424,171,1,0,0,0,1425,1423,1,0,0,0,1426,1432,3,174,87,0,1427,1428,
        3,174,87,0,1428,1429,5,93,0,0,1429,1430,3,88,44,0,1430,1432,1,0,
        0,0,1431,1426,1,0,0,0,1431,1427,1,0,0,0,1432,173,1,0,0,0,1433,1434,
        5,124,0,0,1434,175,1,0,0,0,1435,1438,3,178,89,0,1436,1438,3,192,
        96,0,1437,1435,1,0,0,0,1437,1436,1,0,0,0,1438,177,1,0,0,0,1439,1440,
        5,124,0,0,1440,179,1,0,0,0,1441,1444,3,182,91,0,1442,1444,3,188,
        94,0,1443,1441,1,0,0,0,1443,1442,1,0,0,0,1444,181,1,0,0,0,1445,1448,
        3,184,92,0,1446,1448,3,186,93,0,1447,1445,1,0,0,0,1447,1446,1,0,
        0,0,1448,183,1,0,0,0,1449,1451,5,36,0,0,1450,1449,1,0,0,0,1450,1451,
        1,0,0,0,1451,1452,1,0,0,0,1452,1453,5,40,0,0,1453,1454,5,124,0,0,
        1454,1455,5,81,0,0,1455,1456,3,190,95,0,1456,1457,5,82,0,0,1457,
        185,1,0,0,0,1458,1460,5,36,0,0,1459,1458,1,0,0,0,1459,1460,1,0,0,
        0,1460,1461,1,0,0,0,1461,1462,5,40,0,0,1462,1463,3,178,89,0,1463,
        1464,5,81,0,0,1464,1465,3,190,95,0,1465,1466,5,82,0,0,1466,187,1,
        0,0,0,1467,1469,5,36,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,
        1470,1,0,0,0,1470,1471,5,40,0,0,1471,1472,5,81,0,0,1472,1473,3,190,
        95,0,1473,1474,5,82,0,0,1474,189,1,0,0,0,1475,1477,3,116,58,0,1476,
        1475,1,0,0,0,1476,1477,1,0,0,0,1477,191,1,0,0,0,1478,1479,5,124,
        0,0,1479,193,1,0,0,0,1480,1481,5,40,0,0,1481,1482,5,124,0,0,1482,
        1483,5,93,0,0,1483,1484,3,196,98,0,1484,1485,5,120,0,0,1485,195,
        1,0,0,0,1486,1488,3,10,5,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,
        1489,1,0,0,0,1489,1490,3,176,88,0,1490,197,1,0,0,0,1491,1493,5,71,
        0,0,1492,1494,5,68,0,0,1493,1492,1,0,0,0,1493,1494,1,0,0,0,1494,
        1495,1,0,0,0,1495,1496,3,10,5,0,1496,1497,3,6,3,0,1497,1498,5,120,
        0,0,1498,1505,1,0,0,0,1499,1500,5,71,0,0,1500,1501,5,119,0,0,1501,
        1502,3,6,3,0,1502,1503,5,120,0,0,1503,1505,1,0,0,0,1504,1491,1,0,
        0,0,1504,1499,1,0,0,0,1505,199,1,0,0,0,1506,1508,3,206,103,0,1507,
        1506,1,0,0,0,1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1510,5,71,
        0,0,1510,1512,5,40,0,0,1511,1513,3,10,5,0,1512,1511,1,0,0,0,1512,
        1513,1,0,0,0,1513,1514,1,0,0,0,1514,1515,3,176,88,0,1515,1516,5,
        120,0,0,1516,201,1,0,0,0,1517,1518,5,4,0,0,1518,1519,5,77,0,0,1519,
        1520,5,133,0,0,1520,1521,5,78,0,0,1521,1522,5,120,0,0,1522,203,1,
        0,0,0,1523,1524,5,28,0,0,1524,1525,5,133,0,0,1525,1527,5,81,0,0,
        1526,1528,3,116,58,0,1527,1526,1,0,0,0,1527,1528,1,0,0,0,1528,1529,
        1,0,0,0,1529,1534,5,82,0,0,1530,1531,5,28,0,0,1531,1532,5,133,0,
        0,1532,1534,3,118,59,0,1533,1523,1,0,0,0,1533,1530,1,0,0,0,1534,
        205,1,0,0,0,1535,1536,6,103,-1,0,1536,1537,3,208,104,0,1537,1542,
        1,0,0,0,1538,1539,10,1,0,0,1539,1541,3,208,104,0,1540,1538,1,0,0,
        0,1541,1544,1,0,0,0,1542,1540,1,0,0,0,1542,1543,1,0,0,0,1543,207,
        1,0,0,0,1544,1542,1,0,0,0,1545,1546,5,79,0,0,1546,1547,5,79,0,0,
        1547,1548,3,212,106,0,1548,1549,5,80,0,0,1549,1550,5,80,0,0,1550,
        1553,1,0,0,0,1551,1553,3,210,105,0,1552,1545,1,0,0,0,1552,1551,1,
        0,0,0,1553,209,1,0,0,0,1554,1555,5,2,0,0,1555,1556,5,77,0,0,1556,
        1558,3,252,126,0,1557,1559,5,123,0,0,1558,1557,1,0,0,0,1558,1559,
        1,0,0,0,1559,1560,1,0,0,0,1560,1561,5,78,0,0,1561,1571,1,0,0,0,1562,
        1563,5,2,0,0,1563,1564,5,77,0,0,1564,1566,3,88,44,0,1565,1567,5,
        123,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1568,1,0,0,0,1568,
        1569,5,78,0,0,1569,1571,1,0,0,0,1570,1554,1,0,0,0,1570,1562,1,0,
        0,0,1571,211,1,0,0,0,1572,1574,6,106,-1,0,1573,1575,3,214,107,0,
        1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1580,1,0,0,0,1576,1577,
        3,214,107,0,1577,1578,5,123,0,0,1578,1580,1,0,0,0,1579,1572,1,0,
        0,0,1579,1576,1,0,0,0,1580,1593,1,0,0,0,1581,1582,10,3,0,0,1582,
        1584,5,114,0,0,1583,1585,3,214,107,0,1584,1583,1,0,0,0,1584,1585,
        1,0,0,0,1585,1592,1,0,0,0,1586,1587,10,1,0,0,1587,1588,5,114,0,0,
        1588,1589,3,214,107,0,1589,1590,5,123,0,0,1590,1592,1,0,0,0,1591,
        1581,1,0,0,0,1591,1586,1,0,0,0,1592,1595,1,0,0,0,1593,1591,1,0,0,
        0,1593,1594,1,0,0,0,1594,213,1,0,0,0,1595,1593,1,0,0,0,1596,1598,
        3,216,108,0,1597,1599,3,222,111,0,1598,1597,1,0,0,0,1598,1599,1,
        0,0,0,1599,215,1,0,0,0,1600,1603,5,124,0,0,1601,1603,3,218,109,0,
        1602,1600,1,0,0,0,1602,1601,1,0,0,0,1603,217,1,0,0,0,1604,1605,3,
        220,110,0,1605,1606,5,119,0,0,1606,1607,5,124,0,0,1607,219,1,0,0,
        0,1608,1609,5,124,0,0,1609,221,1,0,0,0,1610,1611,5,77,0,0,1611,1612,
        3,224,112,0,1612,1613,5,78,0,0,1613,223,1,0,0,0,1614,1616,6,112,
        -1,0,1615,1617,3,226,113,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,
        1622,1,0,0,0,1618,1619,10,1,0,0,1619,1621,3,226,113,0,1620,1618,
        1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,0,0,0,1622,1623,1,0,0,0,1623,
        225,1,0,0,0,1624,1622,1,0,0,0,1625,1626,5,77,0,0,1626,1627,3,224,
        112,0,1627,1628,5,78,0,0,1628,1638,1,0,0,0,1629,1630,5,79,0,0,1630,
        1631,3,224,112,0,1631,1632,5,80,0,0,1632,1638,1,0,0,0,1633,1634,
        5,81,0,0,1634,1635,3,224,112,0,1635,1636,5,82,0,0,1636,1638,1,0,
        0,0,1637,1625,1,0,0,0,1637,1629,1,0,0,0,1637,1633,1,0,0,0,1638,227,
        1,0,0,0,1639,1640,6,114,-1,0,1640,1641,3,230,115,0,1641,1647,1,0,
        0,0,1642,1643,10,1,0,0,1643,1644,5,114,0,0,1644,1646,3,230,115,0,
        1645,1642,1,0,0,0,1646,1649,1,0,0,0,1647,1645,1,0,0,0,1647,1648,
        1,0,0,0,1648,229,1,0,0,0,1649,1647,1,0,0,0,1650,1652,3,232,116,0,
        1651,1653,3,274,137,0,1652,1651,1,0,0,0,1652,1653,1,0,0,0,1653,231,
        1,0,0,0,1654,1660,3,234,117,0,1655,1656,3,236,118,0,1656,1657,3,
        238,119,0,1657,1658,3,240,120,0,1658,1660,1,0,0,0,1659,1654,1,0,
        0,0,1659,1655,1,0,0,0,1660,233,1,0,0,0,1661,1666,3,236,118,0,1662,
        1663,3,242,121,0,1663,1664,3,234,117,0,1664,1666,1,0,0,0,1665,1661,
        1,0,0,0,1665,1662,1,0,0,0,1666,235,1,0,0,0,1667,1668,6,118,-1,0,
        1668,1670,3,250,125,0,1669,1671,3,206,103,0,1670,1669,1,0,0,0,1670,
        1671,1,0,0,0,1671,1677,1,0,0,0,1672,1673,5,77,0,0,1673,1674,3,234,
        117,0,1674,1675,5,78,0,0,1675,1677,1,0,0,0,1676,1667,1,0,0,0,1676,
        1672,1,0,0,0,1677,1691,1,0,0,0,1678,1679,10,3,0,0,1679,1690,3,238,
        119,0,1680,1681,10,2,0,0,1681,1683,5,79,0,0,1682,1684,3,88,44,0,
        1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,1687,
        5,80,0,0,1686,1688,3,206,103,0,1687,1686,1,0,0,0,1687,1688,1,0,0,
        0,1688,1690,1,0,0,0,1689,1678,1,0,0,0,1689,1680,1,0,0,0,1690,1693,
        1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,237,1,0,0,0,1693,
        1691,1,0,0,0,1694,1695,5,77,0,0,1695,1696,3,264,132,0,1696,1698,
        5,78,0,0,1697,1699,3,244,122,0,1698,1697,1,0,0,0,1698,1699,1,0,0,
        0,1699,1701,1,0,0,0,1700,1702,3,248,124,0,1701,1700,1,0,0,0,1701,
        1702,1,0,0,0,1702,1704,1,0,0,0,1703,1705,3,376,188,0,1704,1703,1,
        0,0,0,1704,1705,1,0,0,0,1705,1707,1,0,0,0,1706,1708,3,206,103,0,
        1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,239,1,0,0,0,1709,1710,5,
        116,0,0,1710,1712,3,148,74,0,1711,1713,3,254,127,0,1712,1711,1,0,
        0,0,1712,1713,1,0,0,0,1713,241,1,0,0,0,1714,1716,5,85,0,0,1715,1717,
        3,206,103,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1719,1,0,0,
        0,1718,1720,3,244,122,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,
        1738,1,0,0,0,1721,1723,5,89,0,0,1722,1724,3,206,103,0,1723,1722,
        1,0,0,0,1723,1724,1,0,0,0,1724,1738,1,0,0,0,1725,1727,5,110,0,0,
        1726,1728,3,206,103,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1738,
        1,0,0,0,1729,1730,3,10,5,0,1730,1732,5,85,0,0,1731,1733,3,206,103,
        0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,1734,1736,
        3,244,122,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1738,1,0,0,
        0,1737,1714,1,0,0,0,1737,1721,1,0,0,0,1737,1725,1,0,0,0,1737,1729,
        1,0,0,0,1738,243,1,0,0,0,1739,1741,3,246,123,0,1740,1742,3,244,122,
        0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,245,1,0,0,0,1743,1744,
        7,4,0,0,1744,247,1,0,0,0,1745,1746,7,5,0,0,1746,249,1,0,0,0,1747,
        1749,5,123,0,0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,1749,1750,1,0,
        0,0,1750,1751,3,4,2,0,1751,251,1,0,0,0,1752,1754,3,146,73,0,1753,
        1755,3,254,127,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,253,1,
        0,0,0,1756,1765,3,256,128,0,1757,1759,3,258,129,0,1758,1757,1,0,
        0,0,1758,1759,1,0,0,0,1759,1760,1,0,0,0,1760,1761,3,238,119,0,1761,
        1762,3,240,120,0,1762,1765,1,0,0,0,1763,1765,3,260,130,0,1764,1756,
        1,0,0,0,1764,1758,1,0,0,0,1764,1763,1,0,0,0,1765,255,1,0,0,0,1766,
        1772,3,258,129,0,1767,1769,3,242,121,0,1768,1770,3,256,128,0,1769,
        1768,1,0,0,0,1769,1770,1,0,0,0,1770,1772,1,0,0,0,1771,1766,1,0,0,
        0,1771,1767,1,0,0,0,1772,257,1,0,0,0,1773,1774,6,129,-1,0,1774,1788,
        3,238,119,0,1775,1777,5,79,0,0,1776,1778,3,88,44,0,1777,1776,1,0,
        0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,1779,1781,5,80,0,0,1780,
        1782,3,206,103,0,1781,1780,1,0,0,0,1781,1782,1,0,0,0,1782,1788,1,
        0,0,0,1783,1784,5,77,0,0,1784,1785,3,256,128,0,1785,1786,5,78,0,
        0,1786,1788,1,0,0,0,1787,1773,1,0,0,0,1787,1775,1,0,0,0,1787,1783,
        1,0,0,0,1788,1802,1,0,0,0,1789,1790,10,5,0,0,1790,1801,3,238,119,
        0,1791,1792,10,3,0,0,1792,1794,5,79,0,0,1793,1795,3,88,44,0,1794,
        1793,1,0,0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,1798,5,80,
        0,0,1797,1799,3,206,103,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,
        1801,1,0,0,0,1800,1789,1,0,0,0,1800,1791,1,0,0,0,1801,1804,1,0,0,
        0,1802,1800,1,0,0,0,1802,1803,1,0,0,0,1803,259,1,0,0,0,1804,1802,
        1,0,0,0,1805,1810,3,262,131,0,1806,1807,3,242,121,0,1807,1808,3,
        260,130,0,1808,1810,1,0,0,0,1809,1805,1,0,0,0,1809,1806,1,0,0,0,
        1810,261,1,0,0,0,1811,1812,6,131,-1,0,1812,1813,5,123,0,0,1813,1827,
        1,0,0,0,1814,1815,10,3,0,0,1815,1826,3,238,119,0,1816,1817,10,2,
        0,0,1817,1819,5,79,0,0,1818,1820,3,88,44,0,1819,1818,1,0,0,0,1819,
        1820,1,0,0,0,1820,1821,1,0,0,0,1821,1823,5,80,0,0,1822,1824,3,206,
        103,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,1826,1,0,0,0,1825,
        1814,1,0,0,0,1825,1816,1,0,0,0,1826,1829,1,0,0,0,1827,1825,1,0,0,
        0,1827,1828,1,0,0,0,1828,263,1,0,0,0,1829,1827,1,0,0,0,1830,1832,
        3,266,133,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,0,
        0,1833,1835,5,123,0,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1841,
        1,0,0,0,1836,1837,3,266,133,0,1837,1838,5,114,0,0,1838,1839,5,123,
        0,0,1839,1841,1,0,0,0,1840,1831,1,0,0,0,1840,1836,1,0,0,0,1841,265,
        1,0,0,0,1842,1843,6,133,-1,0,1843,1844,3,268,134,0,1844,1850,1,0,
        0,0,1845,1846,10,1,0,0,1846,1847,5,114,0,0,1847,1849,3,268,134,0,
        1848,1845,1,0,0,0,1849,1852,1,0,0,0,1850,1848,1,0,0,0,1850,1851,
        1,0,0,0,1851,267,1,0,0,0,1852,1850,1,0,0,0,1853,1855,3,206,103,0,
        1854,1853,1,0,0,0,1854,1855,1,0,0,0,1855,1856,1,0,0,0,1856,1857,
        3,134,67,0,1857,1858,3,232,116,0,1858,1885,1,0,0,0,1859,1861,3,206,
        103,0,1860,1859,1,0,0,0,1860,1861,1,0,0,0,1861,1862,1,0,0,0,1862,
        1863,3,134,67,0,1863,1864,3,232,116,0,1864,1865,5,93,0,0,1865,1866,
        3,278,139,0,1866,1885,1,0,0,0,1867,1869,3,206,103,0,1868,1867,1,
        0,0,0,1868,1869,1,0,0,0,1869,1870,1,0,0,0,1870,1872,3,134,67,0,1871,
        1873,3,254,127,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1885,1,
        0,0,0,1874,1876,3,206,103,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,
        1876,1877,1,0,0,0,1877,1879,3,134,67,0,1878,1880,3,254,127,0,1879,
        1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,1882,5,93,
        0,0,1882,1883,3,278,139,0,1883,1885,1,0,0,0,1884,1854,1,0,0,0,1884,
        1860,1,0,0,0,1884,1868,1,0,0,0,1884,1875,1,0,0,0,1885,269,1,0,0,
        0,1886,1888,3,206,103,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,
        1890,1,0,0,0,1889,1891,3,134,67,0,1890,1889,1,0,0,0,1890,1891,1,
        0,0,0,1891,1892,1,0,0,0,1892,1894,3,232,116,0,1893,1895,3,304,152,
        0,1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1897,
        3,272,136,0,1897,271,1,0,0,0,1898,1900,3,328,164,0,1899,1898,1,0,
        0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,1910,3,96,48,0,1902,
        1910,3,366,183,0,1903,1904,5,93,0,0,1904,1905,5,19,0,0,1905,1910,
        5,120,0,0,1906,1907,5,93,0,0,1907,1908,5,20,0,0,1908,1910,5,120,
        0,0,1909,1899,1,0,0,0,1909,1902,1,0,0,0,1909,1903,1,0,0,0,1909,1906,
        1,0,0,0,1910,273,1,0,0,0,1911,1917,3,276,138,0,1912,1913,5,77,0,
        0,1913,1914,3,32,16,0,1914,1915,5,78,0,0,1915,1917,1,0,0,0,1916,
        1911,1,0,0,0,1916,1912,1,0,0,0,1917,275,1,0,0,0,1918,1919,5,93,0,
        0,1919,1922,3,278,139,0,1920,1922,3,282,141,0,1921,1918,1,0,0,0,
        1921,1920,1,0,0,0,1922,277,1,0,0,0,1923,1926,3,82,41,0,1924,1926,
        3,282,141,0,1925,1923,1,0,0,0,1925,1924,1,0,0,0,1926,279,1,0,0,0,
        1927,1928,6,140,-1,0,1928,1930,3,278,139,0,1929,1931,5,123,0,0,1930,
        1929,1,0,0,0,1930,1931,1,0,0,0,1931,1940,1,0,0,0,1932,1933,10,1,
        0,0,1933,1934,5,114,0,0,1934,1936,3,278,139,0,1935,1937,5,123,0,
        0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1939,1,0,0,0,1938,1932,
        1,0,0,0,1939,1942,1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,0,1941,
        281,1,0,0,0,1942,1940,1,0,0,0,1943,1944,5,81,0,0,1944,1946,3,280,
        140,0,1945,1947,5,114,0,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,
        1948,1,0,0,0,1948,1949,5,82,0,0,1949,1953,1,0,0,0,1950,1951,5,81,
        0,0,1951,1953,5,82,0,0,1952,1943,1,0,0,0,1952,1950,1,0,0,0,1953,
        283,1,0,0,0,1954,1957,5,124,0,0,1955,1957,3,348,174,0,1956,1954,
        1,0,0,0,1956,1955,1,0,0,0,1957,285,1,0,0,0,1958,1959,3,288,144,0,
        1959,1961,5,81,0,0,1960,1962,3,296,148,0,1961,1960,1,0,0,0,1961,
        1962,1,0,0,0,1962,1963,1,0,0,0,1963,1964,5,82,0,0,1964,287,1,0,0,
        0,1965,1967,3,294,147,0,1966,1968,3,206,103,0,1967,1966,1,0,0,0,
        1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,1971,3,290,145,0,1970,1972,
        3,292,146,0,1971,1970,1,0,0,0,1971,1972,1,0,0,0,1972,1974,1,0,0,
        0,1973,1975,3,310,155,0,1974,1973,1,0,0,0,1974,1975,1,0,0,0,1975,
        1984,1,0,0,0,1976,1978,3,294,147,0,1977,1979,3,206,103,0,1978,1977,
        1,0,0,0,1978,1979,1,0,0,0,1979,1981,1,0,0,0,1980,1982,3,310,155,
        0,1981,1980,1,0,0,0,1981,1982,1,0,0,0,1982,1984,1,0,0,0,1983,1965,
        1,0,0,0,1983,1976,1,0,0,0,1984,289,1,0,0,0,1985,1987,3,10,5,0,1986,
        1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1989,3,284,
        142,0,1989,291,1,0,0,0,1990,1991,5,30,0,0,1991,293,1,0,0,0,1992,
        1993,7,6,0,0,1993,295,1,0,0,0,1994,1996,3,298,149,0,1995,1997,3,
        296,148,0,1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,2004,1,0,0,0,
        1998,1999,3,320,160,0,1999,2001,5,118,0,0,2000,2002,3,296,148,0,
        2001,2000,1,0,0,0,2001,2002,1,0,0,0,2002,2004,1,0,0,0,2003,1994,
        1,0,0,0,2003,1998,1,0,0,0,2004,297,1,0,0,0,2005,2007,3,206,103,0,
        2006,2005,1,0,0,0,2006,2007,1,0,0,0,2007,2009,1,0,0,0,2008,2010,
        3,134,67,0,2009,2008,1,0,0,0,2009,2010,1,0,0,0,2010,2012,1,0,0,0,
        2011,2013,3,300,150,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,2014,
        1,0,0,0,2014,2022,5,120,0,0,2015,2022,3,270,135,0,2016,2022,3,198,
        99,0,2017,2022,3,126,63,0,2018,2022,3,340,170,0,2019,2022,3,122,
        61,0,2020,2022,3,128,64,0,2021,2006,1,0,0,0,2021,2015,1,0,0,0,2021,
        2016,1,0,0,0,2021,2017,1,0,0,0,2021,2018,1,0,0,0,2021,2019,1,0,0,
        0,2021,2020,1,0,0,0,2022,299,1,0,0,0,2023,2024,6,150,-1,0,2024,2025,
        3,302,151,0,2025,2031,1,0,0,0,2026,2027,10,1,0,0,2027,2028,5,114,
        0,0,2028,2030,3,302,151,0,2029,2026,1,0,0,0,2030,2033,1,0,0,0,2031,
        2029,1,0,0,0,2031,2032,1,0,0,0,2032,301,1,0,0,0,2033,2031,1,0,0,
        0,2034,2036,3,232,116,0,2035,2037,3,304,152,0,2036,2035,1,0,0,0,
        2036,2037,1,0,0,0,2037,2039,1,0,0,0,2038,2040,3,308,154,0,2039,2038,
        1,0,0,0,2039,2040,1,0,0,0,2040,2054,1,0,0,0,2041,2043,3,232,116,
        0,2042,2044,3,276,138,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,
        2054,1,0,0,0,2045,2047,5,124,0,0,2046,2045,1,0,0,0,2046,2047,1,0,
        0,0,2047,2049,1,0,0,0,2048,2050,3,206,103,0,2049,2048,1,0,0,0,2049,
        2050,1,0,0,0,2050,2051,1,0,0,0,2051,2052,5,118,0,0,2052,2054,3,88,
        44,0,2053,2034,1,0,0,0,2053,2041,1,0,0,0,2053,2046,1,0,0,0,2054,
        303,1,0,0,0,2055,2056,6,152,-1,0,2056,2057,3,306,153,0,2057,2062,
        1,0,0,0,2058,2059,10,1,0,0,2059,2061,3,306,153,0,2060,2058,1,0,0,
        0,2061,2064,1,0,0,0,2062,2060,1,0,0,0,2062,2063,1,0,0,0,2063,305,
        1,0,0,0,2064,2062,1,0,0,0,2065,2066,7,7,0,0,2066,307,1,0,0,0,2067,
        2068,5,93,0,0,2068,2069,5,127,0,0,2069,2070,6,154,-1,0,2070,309,
        1,0,0,0,2071,2072,5,118,0,0,2072,2073,3,312,156,0,2073,311,1,0,0,
        0,2074,2075,6,156,-1,0,2075,2077,3,314,157,0,2076,2078,5,123,0,0,
        2077,2076,1,0,0,0,2077,2078,1,0,0,0,2078,2087,1,0,0,0,2079,2080,
        10,1,0,0,2080,2081,5,114,0,0,2081,2083,3,314,157,0,2082,2084,5,123,
        0,0,2083,2082,1,0,0,0,2083,2084,1,0,0,0,2084,2086,1,0,0,0,2085,2079,
        1,0,0,0,2086,2089,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,
        313,1,0,0,0,2089,2087,1,0,0,0,2090,2092,3,206,103,0,2091,2090,1,
        0,0,0,2091,2092,1,0,0,0,2092,2093,1,0,0,0,2093,2112,3,318,159,0,
        2094,2096,3,206,103,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,2097,
        1,0,0,0,2097,2099,5,72,0,0,2098,2100,3,320,160,0,2099,2098,1,0,0,
        0,2099,2100,1,0,0,0,2100,2101,1,0,0,0,2101,2112,3,318,159,0,2102,
        2104,3,206,103,0,2103,2102,1,0,0,0,2103,2104,1,0,0,0,2104,2105,1,
        0,0,0,2105,2107,3,320,160,0,2106,2108,5,72,0,0,2107,2106,1,0,0,0,
        2107,2108,1,0,0,0,2108,2109,1,0,0,0,2109,2110,3,318,159,0,2110,2112,
        1,0,0,0,2111,2091,1,0,0,0,2111,2095,1,0,0,0,2111,2103,1,0,0,0,2112,
        315,1,0,0,0,2113,2115,3,10,5,0,2114,2113,1,0,0,0,2114,2115,1,0,0,
        0,2115,2116,1,0,0,0,2116,2119,3,284,142,0,2117,2119,3,154,77,0,2118,
        2114,1,0,0,0,2118,2117,1,0,0,0,2119,317,1,0,0,0,2120,2121,3,316,
        158,0,2121,319,1,0,0,0,2122,2123,7,8,0,0,2123,321,1,0,0,0,2124,2125,
        5,44,0,0,2125,2126,3,324,162,0,2126,323,1,0,0,0,2127,2129,3,146,
        73,0,2128,2130,3,326,163,0,2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,
        325,1,0,0,0,2131,2133,3,242,121,0,2132,2134,3,326,163,0,2133,2132,
        1,0,0,0,2133,2134,1,0,0,0,2134,327,1,0,0,0,2135,2136,5,118,0,0,2136,
        2137,3,330,165,0,2137,329,1,0,0,0,2138,2140,3,332,166,0,2139,2141,
        5,123,0,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2150,1,0,0,0,
        2142,2144,3,332,166,0,2143,2145,5,123,0,0,2144,2143,1,0,0,0,2144,
        2145,1,0,0,0,2145,2146,1,0,0,0,2146,2147,5,114,0,0,2147,2148,3,330,
        165,0,2148,2150,1,0,0,0,2149,2138,1,0,0,0,2149,2142,1,0,0,0,2150,
        331,1,0,0,0,2151,2152,3,334,167,0,2152,2154,5,77,0,0,2153,2155,3,
        32,16,0,2154,2153,1,0,0,0,2154,2155,1,0,0,0,2155,2156,1,0,0,0,2156,
        2157,5,78,0,0,2157,2162,1,0,0,0,2158,2159,3,334,167,0,2159,2160,
        3,282,141,0,2160,2162,1,0,0,0,2161,2151,1,0,0,0,2161,2158,1,0,0,
        0,2162,333,1,0,0,0,2163,2166,3,316,158,0,2164,2166,5,124,0,0,2165,
        2163,1,0,0,0,2165,2164,1,0,0,0,2166,335,1,0,0,0,2167,2168,5,44,0,
        0,2168,2169,3,388,194,0,2169,337,1,0,0,0,2170,2171,5,44,0,0,2171,
        2172,5,133,0,0,2172,2176,5,124,0,0,2173,2174,5,44,0,0,2174,2176,
        5,136,0,0,2175,2170,1,0,0,0,2175,2173,1,0,0,0,2176,339,1,0,0,0,2177,
        2178,5,60,0,0,2178,2179,5,94,0,0,2179,2180,3,342,171,0,2180,2181,
        5,95,0,0,2181,2182,3,118,59,0,2182,341,1,0,0,0,2183,2184,6,171,-1,
        0,2184,2185,3,344,172,0,2185,2191,1,0,0,0,2186,2187,10,1,0,0,2187,
        2188,5,114,0,0,2188,2190,3,344,172,0,2189,2186,1,0,0,0,2190,2193,
        1,0,0,0,2191,2189,1,0,0,0,2191,2192,1,0,0,0,2192,343,1,0,0,0,2193,
        2191,1,0,0,0,2194,2197,3,346,173,0,2195,2197,3,268,134,0,2196,2194,
        1,0,0,0,2196,2195,1,0,0,0,2197,345,1,0,0,0,2198,2200,5,13,0,0,2199,
        2201,5,123,0,0,2200,2199,1,0,0,0,2200,2201,1,0,0,0,2201,2203,1,0,
        0,0,2202,2204,5,124,0,0,2203,2202,1,0,0,0,2203,2204,1,0,0,0,2204,
        2247,1,0,0,0,2205,2207,5,13,0,0,2206,2208,5,124,0,0,2207,2206,1,
        0,0,0,2207,2208,1,0,0,0,2208,2209,1,0,0,0,2209,2210,5,93,0,0,2210,
        2247,3,252,126,0,2211,2213,5,68,0,0,2212,2214,5,123,0,0,2213,2212,
        1,0,0,0,2213,2214,1,0,0,0,2214,2216,1,0,0,0,2215,2217,5,124,0,0,
        2216,2215,1,0,0,0,2216,2217,1,0,0,0,2217,2247,1,0,0,0,2218,2220,
        5,68,0,0,2219,2221,5,124,0,0,2220,2219,1,0,0,0,2220,2221,1,0,0,0,
        2221,2222,1,0,0,0,2222,2223,5,93,0,0,2223,2247,3,252,126,0,2224,
        2225,5,60,0,0,2225,2226,5,94,0,0,2226,2227,3,342,171,0,2227,2228,
        5,95,0,0,2228,2230,5,13,0,0,2229,2231,5,123,0,0,2230,2229,1,0,0,
        0,2230,2231,1,0,0,0,2231,2233,1,0,0,0,2232,2234,5,124,0,0,2233,2232,
        1,0,0,0,2233,2234,1,0,0,0,2234,2247,1,0,0,0,2235,2236,5,60,0,0,2236,
        2237,5,94,0,0,2237,2238,3,342,171,0,2238,2239,5,95,0,0,2239,2241,
        5,13,0,0,2240,2242,5,124,0,0,2241,2240,1,0,0,0,2241,2242,1,0,0,0,
        2242,2243,1,0,0,0,2243,2244,5,93,0,0,2244,2245,3,4,2,0,2245,2247,
        1,0,0,0,2246,2198,1,0,0,0,2246,2205,1,0,0,0,2246,2211,1,0,0,0,2246,
        2218,1,0,0,0,2246,2224,1,0,0,0,2246,2235,1,0,0,0,2247,347,1,0,0,
        0,2248,2249,3,352,176,0,2249,2251,5,94,0,0,2250,2252,3,354,177,0,
        2251,2250,1,0,0,0,2251,2252,1,0,0,0,2252,2253,1,0,0,0,2253,2254,
        5,95,0,0,2254,349,1,0,0,0,2255,2271,3,348,174,0,2256,2257,3,336,
        168,0,2257,2259,5,94,0,0,2258,2260,3,354,177,0,2259,2258,1,0,0,0,
        2259,2260,1,0,0,0,2260,2261,1,0,0,0,2261,2262,5,95,0,0,2262,2271,
        1,0,0,0,2263,2264,3,338,169,0,2264,2266,5,94,0,0,2265,2267,3,354,
        177,0,2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,2268,1,0,0,0,2268,
        2269,5,95,0,0,2269,2271,1,0,0,0,2270,2255,1,0,0,0,2270,2256,1,0,
        0,0,2270,2263,1,0,0,0,2271,351,1,0,0,0,2272,2273,5,124,0,0,2273,
        353,1,0,0,0,2274,2275,6,177,-1,0,2275,2277,3,356,178,0,2276,2278,
        5,123,0,0,2277,2276,1,0,0,0,2277,2278,1,0,0,0,2278,2287,1,0,0,0,
        2279,2280,10,1,0,0,2280,2281,5,114,0,0,2281,2283,3,356,178,0,2282,
        2284,5,123,0,0,2283,2282,1,0,0,0,2283,2284,1,0,0,0,2284,2286,1,0,
        0,0,2285,2279,1,0,0,0,2286,2289,1,0,0,0,2287,2285,1,0,0,0,2287,2288,
        1,0,0,0,2288,355,1,0,0,0,2289,2287,1,0,0,0,2290,2294,3,88,44,0,2291,
        2294,3,252,126,0,2292,2294,3,4,2,0,2293,2290,1,0,0,0,2293,2291,1,
        0,0,0,2293,2292,1,0,0,0,2294,357,1,0,0,0,2295,2296,5,68,0,0,2296,
        2297,3,10,5,0,2297,2298,5,124,0,0,2298,2307,1,0,0,0,2299,2300,5,
        68,0,0,2300,2302,3,10,5,0,2301,2303,5,60,0,0,2302,2301,1,0,0,0,2302,
        2303,1,0,0,0,2303,2304,1,0,0,0,2304,2305,3,348,174,0,2305,2307,1,
        0,0,0,2306,2295,1,0,0,0,2306,2299,1,0,0,0,2307,359,1,0,0,0,2308,
        2310,5,28,0,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,2311,1,0,
        0,0,2311,2312,5,60,0,0,2312,2313,3,118,59,0,2313,361,1,0,0,0,2314,
        2315,5,60,0,0,2315,2316,5,94,0,0,2316,2317,5,95,0,0,2317,2318,3,
        118,59,0,2318,363,1,0,0,0,2319,2320,5,65,0,0,2320,2321,3,96,48,0,
        2321,2322,3,368,184,0,2322,365,1,0,0,0,2323,2325,5,65,0,0,2324,2326,
        3,328,164,0,2325,2324,1,0,0,0,2325,2326,1,0,0,0,2326,2327,1,0,0,
        0,2327,2328,3,96,48,0,2328,2329,3,368,184,0,2329,367,1,0,0,0,2330,
        2332,3,370,185,0,2331,2333,3,368,184,0,2332,2331,1,0,0,0,2332,2333,
        1,0,0,0,2333,369,1,0,0,0,2334,2335,5,9,0,0,2335,2336,5,77,0,0,2336,
        2337,3,372,186,0,2337,2338,5,78,0,0,2338,2339,3,96,48,0,2339,371,
        1,0,0,0,2340,2342,3,206,103,0,2341,2340,1,0,0,0,2341,2342,1,0,0,
        0,2342,2343,1,0,0,0,2343,2344,3,146,73,0,2344,2345,3,232,116,0,2345,
        2355,1,0,0,0,2346,2348,3,206,103,0,2347,2346,1,0,0,0,2347,2348,1,
        0,0,0,2348,2349,1,0,0,0,2349,2351,3,146,73,0,2350,2352,3,254,127,
        0,2351,2350,1,0,0,0,2351,2352,1,0,0,0,2352,2355,1,0,0,0,2353,2355,
        5,123,0,0,2354,2341,1,0,0,0,2354,2347,1,0,0,0,2354,2353,1,0,0,0,
        2355,373,1,0,0,0,2356,2358,5,63,0,0,2357,2359,3,82,41,0,2358,2357,
        1,0,0,0,2358,2359,1,0,0,0,2359,375,1,0,0,0,2360,2363,3,378,189,0,
        2361,2363,3,382,191,0,2362,2360,1,0,0,0,2362,2361,1,0,0,0,2363,377,
        1,0,0,0,2364,2365,5,63,0,0,2365,2367,5,77,0,0,2366,2368,3,380,190,
        0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2369,1,0,0,0,2369,2370,
        5,78,0,0,2370,379,1,0,0,0,2371,2372,6,190,-1,0,2372,2374,3,252,126,
        0,2373,2375,5,123,0,0,2374,2373,1,0,0,0,2374,2375,1,0,0,0,2375,2384,
        1,0,0,0,2376,2377,10,1,0,0,2377,2378,5,114,0,0,2378,2380,3,252,126,
        0,2379,2381,5,123,0,0,2380,2379,1,0,0,0,2380,2381,1,0,0,0,2381,2383,
        1,0,0,0,2382,2376,1,0,0,0,2383,2386,1,0,0,0,2384,2382,1,0,0,0,2384,
        2385,1,0,0,0,2385,381,1,0,0,0,2386,2384,1,0,0,0,2387,2388,5,42,0,
        0,2388,2389,5,77,0,0,2389,2390,3,88,44,0,2390,2391,5,78,0,0,2391,
        2394,1,0,0,0,2392,2394,5,42,0,0,2393,2387,1,0,0,0,2393,2392,1,0,
        0,0,2394,383,1,0,0,0,2395,2396,5,95,0,0,2396,2397,5,95,0,0,2397,
        385,1,0,0,0,2398,2399,5,95,0,0,2399,2400,5,95,0,0,2400,2401,5,93,
        0,0,2401,387,1,0,0,0,2402,2451,5,41,0,0,2403,2451,5,20,0,0,2404,
        2405,5,41,0,0,2405,2406,5,79,0,0,2406,2451,5,80,0,0,2407,2408,5,
        20,0,0,2408,2409,5,79,0,0,2409,2451,5,80,0,0,2410,2451,5,83,0,0,
        2411,2451,5,84,0,0,2412,2451,5,85,0,0,2413,2451,5,86,0,0,2414,2451,
        5,87,0,0,2415,2451,5,88,0,0,2416,2451,5,89,0,0,2417,2451,5,90,0,
        0,2418,2451,5,91,0,0,2419,2451,5,92,0,0,2420,2451,5,93,0,0,2421,
        2451,5,94,0,0,2422,2451,5,95,0,0,2423,2451,5,96,0,0,2424,2451,5,
        97,0,0,2425,2451,5,98,0,0,2426,2451,5,99,0,0,2427,2451,5,100,0,0,
        2428,2451,5,101,0,0,2429,2451,5,102,0,0,2430,2451,5,103,0,0,2431,
        2451,5,104,0,0,2432,2451,3,384,192,0,2433,2451,3,386,193,0,2434,
        2451,5,105,0,0,2435,2451,5,106,0,0,2436,2451,5,107,0,0,2437,2451,
        5,108,0,0,2438,2451,5,109,0,0,2439,2451,5,110,0,0,2440,2451,5,111,
        0,0,2441,2451,5,112,0,0,2442,2451,5,113,0,0,2443,2451,5,114,0,0,
        2444,2451,5,115,0,0,2445,2451,5,116,0,0,2446,2447,5,77,0,0,2447,
        2451,5,78,0,0,2448,2449,5,79,0,0,2449,2451,5,80,0,0,2450,2402,1,
        0,0,0,2450,2403,1,0,0,0,2450,2404,1,0,0,0,2450,2407,1,0,0,0,2450,
        2410,1,0,0,0,2450,2411,1,0,0,0,2450,2412,1,0,0,0,2450,2413,1,0,0,
        0,2450,2414,1,0,0,0,2450,2415,1,0,0,0,2450,2416,1,0,0,0,2450,2417,
        1,0,0,0,2450,2418,1,0,0,0,2450,2419,1,0,0,0,2450,2420,1,0,0,0,2450,
        2421,1,0,0,0,2450,2422,1,0,0,0,2450,2423,1,0,0,0,2450,2424,1,0,0,
        0,2450,2425,1,0,0,0,2450,2426,1,0,0,0,2450,2427,1,0,0,0,2450,2428,
        1,0,0,0,2450,2429,1,0,0,0,2450,2430,1,0,0,0,2450,2431,1,0,0,0,2450,
        2432,1,0,0,0,2450,2433,1,0,0,0,2450,2434,1,0,0,0,2450,2435,1,0,0,
        0,2450,2436,1,0,0,0,2450,2437,1,0,0,0,2450,2438,1,0,0,0,2450,2439,
        1,0,0,0,2450,2440,1,0,0,0,2450,2441,1,0,0,0,2450,2442,1,0,0,0,2450,
        2443,1,0,0,0,2450,2444,1,0,0,0,2450,2445,1,0,0,0,2450,2446,1,0,0,
        0,2450,2448,1,0,0,0,2451,389,1,0,0,0,2452,2460,5,125,0,0,2453,2460,
        5,131,0,0,2454,2460,5,132,0,0,2455,2460,5,133,0,0,2456,2460,3,392,
        196,0,2457,2460,3,394,197,0,2458,2460,3,396,198,0,2459,2452,1,0,
        0,0,2459,2453,1,0,0,0,2459,2454,1,0,0,0,2459,2455,1,0,0,0,2459,2456,
        1,0,0,0,2459,2457,1,0,0,0,2459,2458,1,0,0,0,2460,391,1,0,0,0,2461,
        2462,7,9,0,0,2462,393,1,0,0,0,2463,2464,5,43,0,0,2464,395,1,0,0,
        0,2465,2466,7,10,0,0,2466,397,1,0,0,0,315,399,411,415,426,430,445,
        452,457,459,464,470,480,487,493,497,502,508,515,521,524,527,530,
        537,544,596,611,617,623,636,638,644,659,665,695,700,704,708,711,
        715,721,723,731,735,738,745,752,756,761,765,768,773,779,792,803,
        805,820,822,834,836,849,851,869,871,883,885,896,907,918,929,940,
        950,958,971,981,988,992,996,1000,1004,1009,1012,1015,1021,1029,1034,
        1037,1043,1054,1077,1081,1089,1095,1115,1119,1132,1136,1139,1146,
        1154,1164,1175,1187,1197,1202,1209,1212,1217,1222,1243,1247,1252,
        1263,1269,1273,1278,1282,1287,1290,1312,1318,1329,1333,1336,1346,
        1352,1355,1362,1372,1376,1379,1382,1386,1391,1393,1397,1401,1410,
        1423,1431,1437,1443,1447,1450,1459,1468,1476,1487,1493,1504,1507,
        1512,1527,1533,1542,1552,1558,1566,1570,1574,1579,1584,1591,1593,
        1598,1602,1616,1622,1637,1647,1652,1659,1665,1670,1676,1683,1687,
        1689,1691,1698,1701,1704,1707,1712,1716,1719,1723,1727,1732,1735,
        1737,1741,1748,1754,1758,1764,1769,1771,1777,1781,1787,1794,1798,
        1800,1802,1809,1819,1823,1825,1827,1831,1834,1840,1850,1854,1860,
        1868,1872,1875,1879,1884,1887,1890,1894,1899,1909,1916,1921,1925,
        1930,1936,1940,1946,1952,1956,1961,1967,1971,1974,1978,1981,1983,
        1986,1996,2001,2003,2006,2009,2012,2021,2031,2036,2039,2043,2046,
        2049,2053,2062,2077,2083,2087,2091,2095,2099,2103,2107,2111,2114,
        2118,2129,2133,2140,2144,2149,2154,2161,2165,2175,2191,2196,2200,
        2203,2207,2213,2216,2220,2230,2233,2241,2246,2251,2259,2266,2270,
        2277,2283,2287,2293,2302,2306,2309,2325,2332,2341,2347,2351,2354,
        2358,2362,2367,2374,2380,2384,2393,2450,2459
    ]

class CPP14Parser ( Parser ):

    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'alignas'", "'alignof'", 
                     "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                     "'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", 
                     "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
                     "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "'!'", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", 
                     "'<<='", "'=='", "'!='", "'<='", "'>='", "'&&'", "'||'", 
                     "'++'", "'--'", "','", "'->*'", "'->'", "'?'", "':'", 
                     "'::'", "';'", "'.'", "'.*'", "'...'" ]

    symbolicNames = [ "<INVALID>", "Directive", "Alignas", "Alignof", "Asm", 
                      "Auto", "Bool", "Break", "Case", "Catch", "Char", 
                      "Char16", "Char32", "Class", "Const", "Constexpr", 
                      "Const_cast", "Continue", "Decltype", "Default", "Delete", 
                      "Do", "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True", "Try", "Typedef", "Typeid", "Typename", "Union", 
                      "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShift", 
                      "LeftShiftAssign", "Equal", "NotEqual", "LessEqual", 
                      "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                      "Comma", "ArrowStar", "Arrow", "Question", "Colon", 
                      "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", 
                      "Identifier", "Integerliteral", "Decimalliteral", 
                      "Octalliteral", "Hexadecimalliteral", "Binaryliteral", 
                      "Integersuffix", "Characterliteral", "Floatingliteral", 
                      "Stringliteral", "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_lambdaexpression = 6
    RULE_lambdaintroducer = 7
    RULE_lambdacapture = 8
    RULE_capturedefault = 9
    RULE_capturelist = 10
    RULE_capture = 11
    RULE_simplecapture = 12
    RULE_initcapture = 13
    RULE_lambdadeclarator = 14
    RULE_postfixexpression = 15
    RULE_expressionlist = 16
    RULE_pseudodestructorname = 17
    RULE_unaryexpression = 18
    RULE_unaryoperator = 19
    RULE_newexpression = 20
    RULE_newplacement = 21
    RULE_newtypeid = 22
    RULE_newdeclarator = 23
    RULE_noptrnewdeclarator = 24
    RULE_newinitializer = 25
    RULE_deleteexpression = 26
    RULE_noexceptexpression = 27
    RULE_castexpression = 28
    RULE_pmexpression = 29
    RULE_multiplicativeexpression = 30
    RULE_additiveexpression = 31
    RULE_shiftexpression = 32
    RULE_relationalexpression = 33
    RULE_equalityexpression = 34
    RULE_andexpression = 35
    RULE_exclusiveorexpression = 36
    RULE_inclusiveorexpression = 37
    RULE_logicalandexpression = 38
    RULE_logicalorexpression = 39
    RULE_conditionalexpression = 40
    RULE_assignmentexpression = 41
    RULE_assignmentoperator = 42
    RULE_expression = 43
    RULE_constantexpression = 44
    RULE_statement = 45
    RULE_labeledstatement = 46
    RULE_expressionstatement = 47
    RULE_compoundstatement = 48
    RULE_statementseq = 49
    RULE_selectionstatement = 50
    RULE_condition = 51
    RULE_iterationstatement = 52
    RULE_forinitstatement = 53
    RULE_forrangedeclaration = 54
    RULE_forrangeinitializer = 55
    RULE_jumpstatement = 56
    RULE_declarationstatement = 57
    RULE_declarationseq = 58
    RULE_declaration = 59
    RULE_blockdeclaration = 60
    RULE_aliasdeclaration = 61
    RULE_simpledeclaration = 62
    RULE_static_assertdeclaration = 63
    RULE_emptydeclaration = 64
    RULE_attributedeclaration = 65
    RULE_declspecifier = 66
    RULE_declspecifierseq = 67
    RULE_storageclassspecifier = 68
    RULE_functionspecifier = 69
    RULE_typedefname = 70
    RULE_typespecifier = 71
    RULE_trailingtypespecifier = 72
    RULE_typespecifierseq = 73
    RULE_trailingtypespecifierseq = 74
    RULE_simpletypespecifier = 75
    RULE_typename = 76
    RULE_decltypespecifier = 77
    RULE_elaboratedtypespecifier = 78
    RULE_enumname = 79
    RULE_enumspecifier = 80
    RULE_enumhead = 81
    RULE_opaqueenumdeclaration = 82
    RULE_enumkey = 83
    RULE_enumbase = 84
    RULE_enumeratorlist = 85
    RULE_enumeratordefinition = 86
    RULE_enumerator = 87
    RULE_namespacename = 88
    RULE_originalnamespacename = 89
    RULE_namespacedefinition = 90
    RULE_namednamespacedefinition = 91
    RULE_originalnamespacedefinition = 92
    RULE_extensionnamespacedefinition = 93
    RULE_unnamednamespacedefinition = 94
    RULE_namespacebody = 95
    RULE_namespacealias = 96
    RULE_namespacealiasdefinition = 97
    RULE_qualifiednamespacespecifier = 98
    RULE_usingdeclaration = 99
    RULE_usingdirective = 100
    RULE_asmdefinition = 101
    RULE_linkagespecification = 102
    RULE_attributespecifierseq = 103
    RULE_attributespecifier = 104
    RULE_alignmentspecifier = 105
    RULE_attributelist = 106
    RULE_attribute = 107
    RULE_attributetoken = 108
    RULE_attributescopedtoken = 109
    RULE_attributenamespace = 110
    RULE_attributeargumentclause = 111
    RULE_balancedtokenseq = 112
    RULE_balancedtoken = 113
    RULE_initdeclaratorlist = 114
    RULE_initdeclarator = 115
    RULE_declarator = 116
    RULE_ptrdeclarator = 117
    RULE_noptrdeclarator = 118
    RULE_parametersandqualifiers = 119
    RULE_trailingreturntype = 120
    RULE_ptroperator = 121
    RULE_cvqualifierseq = 122
    RULE_cvqualifier = 123
    RULE_refqualifier = 124
    RULE_declaratorid = 125
    RULE_typeid = 126
    RULE_abstractdeclarator = 127
    RULE_ptrabstractdeclarator = 128
    RULE_noptrabstractdeclarator = 129
    RULE_abstractpackdeclarator = 130
    RULE_noptrabstractpackdeclarator = 131
    RULE_parameterdeclarationclause = 132
    RULE_parameterdeclarationlist = 133
    RULE_parameterdeclaration = 134
    RULE_functiondefinition = 135
    RULE_functionbody = 136
    RULE_initializer = 137
    RULE_braceorequalinitializer = 138
    RULE_initializerclause = 139
    RULE_initializerlist = 140
    RULE_bracedinitlist = 141
    RULE_classname = 142
    RULE_classspecifier = 143
    RULE_classhead = 144
    RULE_classheadname = 145
    RULE_classvirtspecifier = 146
    RULE_classkey = 147
    RULE_memberspecification = 148
    RULE_memberdeclaration = 149
    RULE_memberdeclaratorlist = 150
    RULE_memberdeclarator = 151
    RULE_virtspecifierseq = 152
    RULE_virtspecifier = 153
    RULE_purespecifier = 154
    RULE_baseclause = 155
    RULE_basespecifierlist = 156
    RULE_basespecifier = 157
    RULE_classordecltype = 158
    RULE_basetypespecifier = 159
    RULE_accessspecifier = 160
    RULE_conversionfunctionid = 161
    RULE_conversiontypeid = 162
    RULE_conversiondeclarator = 163
    RULE_ctorinitializer = 164
    RULE_meminitializerlist = 165
    RULE_meminitializer = 166
    RULE_meminitializerid = 167
    RULE_operatorfunctionid = 168
    RULE_literaloperatorid = 169
    RULE_templatedeclaration = 170
    RULE_templateparameterlist = 171
    RULE_templateparameter = 172
    RULE_typeparameter = 173
    RULE_simpletemplateid = 174
    RULE_templateid = 175
    RULE_templatename = 176
    RULE_templateargumentlist = 177
    RULE_templateargument = 178
    RULE_typenamespecifier = 179
    RULE_explicitinstantiation = 180
    RULE_explicitspecialization = 181
    RULE_tryblock = 182
    RULE_functiontryblock = 183
    RULE_handlerseq = 184
    RULE_handler = 185
    RULE_exceptiondeclaration = 186
    RULE_throwexpression = 187
    RULE_exceptionspecification = 188
    RULE_dynamicexceptionspecification = 189
    RULE_typeidlist = 190
    RULE_noexceptspecification = 191
    RULE_rightShift = 192
    RULE_rightShiftAssign = 193
    RULE_operator = 194
    RULE_literal = 195
    RULE_booleanliteral = 196
    RULE_pointerliteral = 197
    RULE_userdefinedliteral = 198

    ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "expressionlist", "pseudodestructorname", "unaryexpression", 
                   "unaryoperator", "newexpression", "newplacement", "newtypeid", 
                   "newdeclarator", "noptrnewdeclarator", "newinitializer", 
                   "deleteexpression", "noexceptexpression", "castexpression", 
                   "pmexpression", "multiplicativeexpression", "additiveexpression", 
                   "shiftexpression", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "condition", "iterationstatement", 
                   "forinitstatement", "forrangedeclaration", "forrangeinitializer", 
                   "jumpstatement", "declarationstatement", "declarationseq", 
                   "declaration", "blockdeclaration", "aliasdeclaration", 
                   "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
                   "attributedeclaration", "declspecifier", "declspecifierseq", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "typename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "typeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "rightShift", 
                   "rightShiftAssign", "operator", "literal", "booleanliteral", 
                   "pointerliteral", "userdefinedliteral" ]

    EOF = Token.EOF
    Directive=1
    Alignas=2
    Alignof=3
    Asm=4
    Auto=5
    Bool=6
    Break=7
    Case=8
    Catch=9
    Char=10
    Char16=11
    Char32=12
    Class=13
    Const=14
    Constexpr=15
    Const_cast=16
    Continue=17
    Decltype=18
    Default=19
    Delete=20
    Do=21
    Double=22
    Dynamic_cast=23
    Else=24
    Enum=25
    Explicit=26
    Export=27
    Extern=28
    False_=29
    Final=30
    Float=31
    For=32
    Friend=33
    Goto=34
    If=35
    Inline=36
    Int=37
    Long=38
    Mutable=39
    Namespace=40
    New=41
    Noexcept=42
    Nullptr=43
    Operator=44
    Override=45
    Private=46
    Protected=47
    Public=48
    Register=49
    Reinterpret_cast=50
    Return=51
    Short=52
    Signed=53
    Sizeof=54
    Static=55
    Static_assert=56
    Static_cast=57
    Struct=58
    Switch=59
    Template=60
    This=61
    Thread_local=62
    Throw=63
    True_=64
    Try=65
    Typedef=66
    Typeid=67
    Typename=68
    Union=69
    Unsigned=70
    Using=71
    Virtual=72
    Void=73
    Volatile=74
    Wchar=75
    While=76
    LeftParen=77
    RightParen=78
    LeftBracket=79
    RightBracket=80
    LeftBrace=81
    RightBrace=82
    Plus=83
    Minus=84
    Star=85
    Div=86
    Mod=87
    Caret=88
    And=89
    Or=90
    Tilde=91
    Not=92
    Assign=93
    Less=94
    Greater=95
    PlusAssign=96
    MinusAssign=97
    StarAssign=98
    DivAssign=99
    ModAssign=100
    XorAssign=101
    AndAssign=102
    OrAssign=103
    LeftShift=104
    LeftShiftAssign=105
    Equal=106
    NotEqual=107
    LessEqual=108
    GreaterEqual=109
    AndAnd=110
    OrOr=111
    PlusPlus=112
    MinusMinus=113
    Comma=114
    ArrowStar=115
    Arrow=116
    Question=117
    Colon=118
    Doublecolon=119
    Semi=120
    Dot=121
    DotStar=122
    Ellipsis=123
    Identifier=124
    Integerliteral=125
    Decimalliteral=126
    Octalliteral=127
    Hexadecimalliteral=128
    Binaryliteral=129
    Integersuffix=130
    Characterliteral=131
    Floatingliteral=132
    Stringliteral=133
    Userdefinedintegerliteral=134
    Userdefinedfloatingliteral=135
    Userdefinedstringliteral=136
    Userdefinedcharacterliteral=137
    Whitespace=138
    Newline=139
    BlockComment=140
    LineComment=141

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationunitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationunit" ):
                listener.enterTranslationunit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationunit" ):
                listener.exitTranslationunit(self)




    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6175017772679232628) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 459384754220313597) != 0):
                self.state = 398
                self.declarationseq(0)


            self.state = 401
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(CPP14Parser.LiteralContext,0)


        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def lambdaexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_primaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression" ):
                listener.enterPrimaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression" ):
                listener.exitPrimaryexpression(self)




    def primaryexpression(self):

        localctx = CPP14Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        try:
            self.state = 411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 43, 64, 125, 131, 132, 133, 134, 135, 136, 137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.literal()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 404
                self.match(CPP14Parser.This)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 405
                self.match(CPP14Parser.LeftParen)
                self.state = 406
                self.expression(0)
                self.state = 407
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [18, 44, 91, 119, 124]:
                self.enterOuterAlt(localctx, 4)
                self.state = 409
                self.idexpression()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 5)
                self.state = 410
                self.lambdaexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiedidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression" ):
                listener.enterIdexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression" ):
                listener.exitIdexpression(self)




    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 414
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionfunctionidContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def templateid(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid" ):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid" ):
                listener.exitUnqualifiedid(self)




    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 420
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 421
                self.match(CPP14Parser.Tilde)
                self.state = 422
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 423
                self.match(CPP14Parser.Tilde)
                self.state = 424
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 425
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedid" ):
                listener.enterQualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedid" ):
                listener.exitQualifiedid(self)




    def qualifiedid(self):

        localctx = CPP14Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.nestednamespecifier(0)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 429
                self.match(CPP14Parser.Template)


            self.state = 432
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestednamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def typename(self):
            return self.getTypedRuleContext(CPP14Parser.TypenameContext,0)


        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier" ):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier" ):
                listener.exitNestednamespecifier(self)



    def nestednamespecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 435
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 2:
                self.state = 436
                self.typename()
                self.state = 437
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 3:
                self.state = 439
                self.namespacename()
                self.state = 440
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 4:
                self.state = 442
                self.decltypespecifier()
                self.state = 443
                self.match(CPP14Parser.Doublecolon)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 459
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 447
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 448
                        self.match(CPP14Parser.Identifier)
                        self.state = 449
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 450
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 452
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 451
                            self.match(CPP14Parser.Template)


                        self.state = 454
                        self.simpletemplateid()
                        self.state = 455
                        self.match(CPP14Parser.Doublecolon)
                        pass

             
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaintroducer(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaintroducerContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaexpression" ):
                listener.enterLambdaexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaexpression" ):
                listener.exitLambdaexpression(self)




    def lambdaexpression(self):

        localctx = CPP14Parser.LambdaexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaexpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.lambdaintroducer()
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 463
                self.lambdadeclarator()


            self.state = 466
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaintroducerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaintroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaintroducer" ):
                listener.enterLambdaintroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaintroducer" ):
                listener.exitLambdaintroducer(self)




    def lambdaintroducer(self):

        localctx = CPP14Parser.LambdaintroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaintroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(CPP14Parser.LeftBracket)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & -9223372032291373055) != 0):
                self.state = 469
                self.lambdacapture()


            self.state = 472
            self.match(CPP14Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdacaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14Parser.CapturedefaultContext,0)


        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture" ):
                listener.enterLambdacapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture" ):
                listener.exitLambdacapture(self)




    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdacapture)
        try:
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.capturedefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 476
                self.capturedefault()
                self.state = 477
                self.match(CPP14Parser.Comma)
                self.state = 478
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturedefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturedefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault" ):
                listener.enterCapturedefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault" ):
                listener.exitCapturedefault(self)




    def capturedefault(self):

        localctx = CPP14Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capturedefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            _la = self._input.LA(1)
            if not(_la==89 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist" ):
                listener.enterCapturelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist" ):
                listener.exitCapturelist(self)



    def capturelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.capture()
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 486
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 489
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 490
                    self.match(CPP14Parser.Comma)
                    self.state = 491
                    self.capture()
                    self.state = 493
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 492
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplecapture(self):
            return self.getTypedRuleContext(CPP14Parser.SimplecaptureContext,0)


        def initcapture(self):
            return self.getTypedRuleContext(CPP14Parser.InitcaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)




    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self.simplecapture()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplecaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simplecapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture" ):
                listener.enterSimplecapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture" ):
                listener.exitSimplecapture(self)




    def simplecapture(self):

        localctx = CPP14Parser.SimplecaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simplecapture)
        try:
            self.state = 508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.match(CPP14Parser.And)
                self.state = 506
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(CPP14Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitcaptureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initcapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture" ):
                listener.enterInitcapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture" ):
                listener.exitInitcapture(self)




    def initcapture(self):

        localctx = CPP14Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.match(CPP14Parser.Identifier)
                self.state = 511
                self.initializer()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.match(CPP14Parser.And)
                self.state = 513
                self.match(CPP14Parser.Identifier)
                self.state = 514
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdadeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdadeclarator" ):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdadeclarator" ):
                listener.exitLambdadeclarator(self)




    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdadeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(CPP14Parser.LeftParen)
            self.state = 518
            self.parameterdeclarationclause()
            self.state = 519
            self.match(CPP14Parser.RightParen)
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 520
                self.match(CPP14Parser.Mutable)


            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==63:
                self.state = 523
                self.exceptionspecification()


            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==79:
                self.state = 526
                self.attributespecifierseq(0)


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 529
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PrimaryexpressionContext,0)


        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def Typeid(self):
            return self.getToken(CPP14Parser.Typeid, 0)

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CPP14Parser.Dot, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext,0)


        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression" ):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression" ):
                listener.exitPostfixexpression(self)



    def postfixexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixexpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 533
                self.primaryexpression()
                pass

            elif la_ == 2:
                self.state = 534
                self.simpletypespecifier()
                self.state = 535
                self.match(CPP14Parser.LeftParen)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276798041) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 536
                    self.expressionlist()


                self.state = 539
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.state = 541
                self.typenamespecifier()
                self.state = 542
                self.match(CPP14Parser.LeftParen)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276798041) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 543
                    self.expressionlist()


                self.state = 546
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 4:
                self.state = 548
                self.simpletypespecifier()
                self.state = 549
                self.bracedinitlist()
                pass

            elif la_ == 5:
                self.state = 551
                self.typenamespecifier()
                self.state = 552
                self.bracedinitlist()
                pass

            elif la_ == 6:
                self.state = 554
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 555
                self.match(CPP14Parser.Less)
                self.state = 556
                self.typeid()
                self.state = 557
                self.match(CPP14Parser.Greater)
                self.state = 558
                self.match(CPP14Parser.LeftParen)
                self.state = 559
                self.expression(0)
                self.state = 560
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.state = 562
                self.match(CPP14Parser.Static_cast)
                self.state = 563
                self.match(CPP14Parser.Less)
                self.state = 564
                self.typeid()
                self.state = 565
                self.match(CPP14Parser.Greater)
                self.state = 566
                self.match(CPP14Parser.LeftParen)
                self.state = 567
                self.expression(0)
                self.state = 568
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.state = 570
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 571
                self.match(CPP14Parser.Less)
                self.state = 572
                self.typeid()
                self.state = 573
                self.match(CPP14Parser.Greater)
                self.state = 574
                self.match(CPP14Parser.LeftParen)
                self.state = 575
                self.expression(0)
                self.state = 576
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.state = 578
                self.match(CPP14Parser.Const_cast)
                self.state = 579
                self.match(CPP14Parser.Less)
                self.state = 580
                self.typeid()
                self.state = 581
                self.match(CPP14Parser.Greater)
                self.state = 582
                self.match(CPP14Parser.LeftParen)
                self.state = 583
                self.expression(0)
                self.state = 584
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 10:
                self.state = 586
                self.match(CPP14Parser.Typeid)
                self.state = 587
                self.match(CPP14Parser.LeftParen)
                self.state = 588
                self.expression(0)
                self.state = 589
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 11:
                self.state = 591
                self.match(CPP14Parser.Typeid)
                self.state = 592
                self.match(CPP14Parser.LeftParen)
                self.state = 593
                self.typeid()
                self.state = 594
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 638
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 636
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 598
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 599
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 600
                        self.expression(0)
                        self.state = 601
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 603
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 604
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 605
                        self.bracedinitlist()
                        self.state = 606
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 608
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 609
                        self.match(CPP14Parser.LeftParen)
                        self.state = 611
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276798041) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                            self.state = 610
                            self.expressionlist()


                        self.state = 613
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 614
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 615
                        self.match(CPP14Parser.Dot)
                        self.state = 617
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 616
                            self.match(CPP14Parser.Template)


                        self.state = 619
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 620
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 621
                        self.match(CPP14Parser.Arrow)
                        self.state = 623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==60:
                            self.state = 622
                            self.match(CPP14Parser.Template)


                        self.state = 625
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 626
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 627
                        self.match(CPP14Parser.Dot)
                        self.state = 628
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 629
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 630
                        self.match(CPP14Parser.Arrow)
                        self.state = 631
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 632
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 633
                        self.match(CPP14Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 634
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 635
                        self.match(CPP14Parser.MinusMinus)
                        pass

             
                self.state = 640
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionlist" ):
                listener.enterExpressionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionlist" ):
                listener.exitExpressionlist(self)




    def expressionlist(self):

        localctx = CPP14Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudodestructornameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.TypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.TypenameContext,i)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname" ):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname" ):
                listener.exitPseudodestructorname(self)




    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pseudodestructorname)
        self._la = 0 # Token type
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.nestednamespecifier(0)


                self.state = 646
                self.typename()
                self.state = 647
                self.match(CPP14Parser.Doublecolon)
                self.state = 648
                self.match(CPP14Parser.Tilde)
                self.state = 649
                self.typename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 651
                self.nestednamespecifier(0)
                self.state = 652
                self.match(CPP14Parser.Template)
                self.state = 653
                self.simpletemplateid()
                self.state = 654
                self.match(CPP14Parser.Doublecolon)
                self.state = 655
                self.match(CPP14Parser.Tilde)
                self.state = 656
                self.typename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==119 or _la==124:
                    self.state = 658
                    self.nestednamespecifier(0)


                self.state = 661
                self.match(CPP14Parser.Tilde)
                self.state = 662
                self.typename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 663
                self.match(CPP14Parser.Tilde)
                self.state = 664
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)


        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext,0)


        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def noexceptexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptexpressionContext,0)


        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext,0)


        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression" ):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression" ):
                listener.exitUnaryexpression(self)




    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_unaryexpression)
        try:
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.match(CPP14Parser.PlusPlus)
                self.state = 669
                self.castexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.match(CPP14Parser.MinusMinus)
                self.state = 671
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 672
                self.unaryoperator()
                self.state = 673
                self.castexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 675
                self.match(CPP14Parser.Sizeof)
                self.state = 676
                self.unaryexpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 677
                self.match(CPP14Parser.Sizeof)
                self.state = 678
                self.match(CPP14Parser.LeftParen)
                self.state = 679
                self.typeid()
                self.state = 680
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 682
                self.match(CPP14Parser.Sizeof)
                self.state = 683
                self.match(CPP14Parser.Ellipsis)
                self.state = 684
                self.match(CPP14Parser.LeftParen)
                self.state = 685
                self.match(CPP14Parser.Identifier)
                self.state = 686
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 687
                self.match(CPP14Parser.Alignof)
                self.state = 688
                self.match(CPP14Parser.LeftParen)
                self.state = 689
                self.typeid()
                self.state = 690
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 692
                self.noexceptexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 693
                self.newexpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 694
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Not(self):
            return self.getToken(CPP14Parser.Not, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator" ):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator" ):
                listener.exitUnaryoperator(self)




    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_unaryoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 967) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def newtypeid(self):
            return self.getTypedRuleContext(CPP14Parser.NewtypeidContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def newplacement(self):
            return self.getTypedRuleContext(CPP14Parser.NewplacementContext,0)


        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression" ):
                listener.enterNewexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression" ):
                listener.exitNewexpression(self)




    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_newexpression)
        self._la = 0 # Token type
        try:
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 699
                    self.match(CPP14Parser.Doublecolon)


                self.state = 702
                self.match(CPP14Parser.New)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 703
                    self.newplacement()


                self.state = 706
                self.newtypeid()
                self.state = 708
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 707
                    self.newinitializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 710
                    self.match(CPP14Parser.Doublecolon)


                self.state = 713
                self.match(CPP14Parser.New)
                self.state = 715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 714
                    self.newplacement()


                self.state = 717
                self.match(CPP14Parser.LeftParen)
                self.state = 718
                self.typeid()
                self.state = 719
                self.match(CPP14Parser.RightParen)
                self.state = 721
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 720
                    self.newinitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newplacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewplacement" ):
                listener.enterNewplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewplacement" ):
                listener.exitNewplacement(self)




    def newplacement(self):

        localctx = CPP14Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(CPP14Parser.LeftParen)
            self.state = 726
            self.expressionlist()
            self.state = 727
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newtypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeid" ):
                listener.enterNewtypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeid" ):
                listener.exitNewtypeid(self)




    def newtypeid(self):

        localctx = CPP14Parser.NewtypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newtypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.typespecifierseq()
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 730
                self.newdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator" ):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator" ):
                listener.exitNewdeclarator(self)




    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newdeclarator)
        try:
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 85, 89, 110, 119, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.ptroperator()
                self.state = 735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 734
                    self.newdeclarator()


                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrnewdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator" ):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator" ):
                listener.exitNoptrnewdeclarator(self)



    def noptrnewdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(CPP14Parser.LeftBracket)
            self.state = 742
            self.expression(0)
            self.state = 743
            self.match(CPP14Parser.RightBracket)
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 744
                self.attributespecifierseq(0)


            self._ctx.stop = self._input.LT(-1)
            self.state = 756
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 747
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 748
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 749
                    self.constantexpression()
                    self.state = 750
                    self.match(CPP14Parser.RightBracket)
                    self.state = 752
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                    if la_ == 1:
                        self.state = 751
                        self.attributespecifierseq(0)

             
                self.state = 758
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer" ):
                listener.enterNewinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer" ):
                listener.exitNewinitializer(self)




    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_newinitializer)
        self._la = 0 # Token type
        try:
            self.state = 765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.match(CPP14Parser.LeftParen)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276798041) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 760
                    self.expressionlist()


                self.state = 763
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression" ):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression" ):
                listener.exitDeleteexpression(self)




    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_deleteexpression)
        self._la = 0 # Token type
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 767
                    self.match(CPP14Parser.Doublecolon)


                self.state = 770
                self.match(CPP14Parser.Delete)
                self.state = 771
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 772
                    self.match(CPP14Parser.Doublecolon)


                self.state = 775
                self.match(CPP14Parser.Delete)
                self.state = 776
                self.match(CPP14Parser.LeftBracket)
                self.state = 777
                self.match(CPP14Parser.RightBracket)
                self.state = 778
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoexceptexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptexpression" ):
                listener.enterNoexceptexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptexpression" ):
                listener.exitNoexceptexpression(self)




    def noexceptexpression(self):

        localctx = CPP14Parser.NoexceptexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_noexceptexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(CPP14Parser.Noexcept)
            self.state = 782
            self.match(CPP14Parser.LeftParen)
            self.state = 783
            self.expression(0)
            self.state = 784
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression" ):
                listener.enterCastexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression" ):
                listener.exitCastexpression(self)




    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_castexpression)
        try:
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.match(CPP14Parser.LeftParen)
                self.state = 788
                self.typeid()
                self.state = 789
                self.match(CPP14Parser.RightParen)
                self.state = 790
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def DotStar(self):
            return self.getToken(CPP14Parser.DotStar, 0)

        def ArrowStar(self):
            return self.getToken(CPP14Parser.ArrowStar, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression" ):
                listener.enterPmexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression" ):
                listener.exitPmexpression(self)



    def pmexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 803
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 797
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 798
                        self.match(CPP14Parser.DotStar)
                        self.state = 799
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 800
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 801
                        self.match(CPP14Parser.ArrowStar)
                        self.state = 802
                        self.castexpression()
                        pass

             
                self.state = 807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def Div(self):
            return self.getToken(CPP14Parser.Div, 0)

        def Mod(self):
            return self.getToken(CPP14Parser.Mod, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression" ):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression" ):
                listener.exitMultiplicativeexpression(self)



    def multiplicativeexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 820
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 811
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 812
                        self.match(CPP14Parser.Star)
                        self.state = 813
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 814
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 815
                        self.match(CPP14Parser.Div)
                        self.state = 816
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 817
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 818
                        self.match(CPP14Parser.Mod)
                        self.state = 819
                        self.pmexpression(0)
                        pass

             
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression" ):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression" ):
                listener.exitAdditiveexpression(self)



    def additiveexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 834
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 828
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 829
                        self.match(CPP14Parser.Plus)
                        self.state = 830
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 831
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 832
                        self.match(CPP14Parser.Minus)
                        self.state = 833
                        self.multiplicativeexpression(0)
                        pass

             
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def LeftShift(self):
            return self.getToken(CPP14Parser.LeftShift, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression" ):
                listener.enterShiftexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression" ):
                listener.exitShiftexpression(self)



    def shiftexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 849
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 842
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 843
                        self.match(CPP14Parser.LeftShift)
                        self.state = 844
                        self.additiveexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                        self.state = 845
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 846
                        self.rightShift()
                        self.state = 847
                        self.additiveexpression(0)
                        pass

             
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def LessEqual(self):
            return self.getToken(CPP14Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(CPP14Parser.GreaterEqual, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression" ):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression" ):
                listener.exitRelationalexpression(self)



    def relationalexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 869
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 857
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 858
                        self.match(CPP14Parser.Less)
                        self.state = 859
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 860
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 861
                        self.match(CPP14Parser.Greater)
                        self.state = 862
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 863
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 864
                        self.match(CPP14Parser.LessEqual)
                        self.state = 865
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 866
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 867
                        self.match(CPP14Parser.GreaterEqual)
                        self.state = 868
                        self.shiftexpression(0)
                        pass

             
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def Equal(self):
            return self.getToken(CPP14Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CPP14Parser.NotEqual, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression" ):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression" ):
                listener.exitEqualityexpression(self)



    def equalityexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 885
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 883
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 877
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 878
                        self.match(CPP14Parser.Equal)
                        self.state = 879
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 880
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 881
                        self.match(CPP14Parser.NotEqual)
                        self.state = 882
                        self.relationalexpression(0)
                        pass

             
                self.state = 887
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression" ):
                listener.enterAndexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression" ):
                listener.exitAndexpression(self)



    def andexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 891
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 892
                    self.match(CPP14Parser.And)
                    self.state = 893
                    self.equalityexpression(0) 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def Caret(self):
            return self.getToken(CPP14Parser.Caret, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression" ):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression" ):
                listener.exitExclusiveorexpression(self)



    def exclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 902
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 903
                    self.match(CPP14Parser.Caret)
                    self.state = 904
                    self.andexpression(0) 
                self.state = 909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpression" ):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpression" ):
                listener.exitInclusiveorexpression(self)



    def inclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 913
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 914
                    self.match(CPP14Parser.Or)
                    self.state = 915
                    self.exclusiveorexpression(0) 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalandexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression" ):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression" ):
                listener.exitLogicalandexpression(self)



    def logicalandexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                    self.state = 924
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 925
                    self.match(CPP14Parser.AndAnd)
                    self.state = 926
                    self.inclusiveorexpression(0) 
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalorexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def OrOr(self):
            return self.getToken(CPP14Parser.OrOr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression" ):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression" ):
                listener.exitLogicalorexpression(self)



    def logicalorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                    self.state = 935
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 936
                    self.match(CPP14Parser.OrOr)
                    self.state = 937
                    self.logicalandexpression(0) 
                self.state = 942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def Question(self):
            return self.getToken(CPP14Parser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression" ):
                listener.enterConditionalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression" ):
                listener.exitConditionalexpression(self)




    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conditionalexpression)
        try:
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.logicalorexpression(0)
                self.state = 945
                self.match(CPP14Parser.Question)
                self.state = 946
                self.expression(0)
                self.state = 947
                self.match(CPP14Parser.Colon)
                self.state = 948
                self.assignmentexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext,0)


        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def throwexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ThrowexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression" ):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression" ):
                listener.exitAssignmentexpression(self)




    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assignmentexpression)
        try:
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.logicalorexpression(0)
                self.state = 954
                self.assignmentoperator()
                self.state = 955
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 957
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CPP14Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext,0)


        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator" ):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator" ):
                listener.exitAssignmentoperator(self)




    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_assignmentoperator)
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(CPP14Parser.Assign)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.match(CPP14Parser.StarAssign)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 3)
                self.state = 962
                self.match(CPP14Parser.DivAssign)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 4)
                self.state = 963
                self.match(CPP14Parser.ModAssign)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 5)
                self.state = 964
                self.match(CPP14Parser.PlusAssign)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self.match(CPP14Parser.MinusAssign)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 7)
                self.state = 966
                self.rightShiftAssign()
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 8)
                self.state = 967
                self.match(CPP14Parser.LeftShiftAssign)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 9)
                self.state = 968
                self.match(CPP14Parser.AndAssign)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 10)
                self.state = 969
                self.match(CPP14Parser.XorAssign)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 11)
                self.state = 970
                self.match(CPP14Parser.OrAssign)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 976
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 977
                    self.match(CPP14Parser.Comma)
                    self.state = 978
                    self.assignmentexpression() 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpression" ):
                listener.enterConstantexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpression" ):
                listener.exitConstantexpression(self)




    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledstatement(self):
            return self.getTypedRuleContext(CPP14Parser.LabeledstatementContext,0)


        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext,0)


        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext,0)


        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext,0)


        def declarationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationstatementContext,0)


        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.labeledstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 987
                    self.attributespecifierseq(0)


                self.state = 990
                self.expressionstatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 991
                    self.attributespecifierseq(0)


                self.state = 994
                self.compoundstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 995
                    self.attributespecifierseq(0)


                self.state = 998
                self.selectionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 999
                    self.attributespecifierseq(0)


                self.state = 1002
                self.iterationstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1003
                    self.attributespecifierseq(0)


                self.state = 1006
                self.jumpstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1007
                self.declarationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1008
                    self.attributespecifierseq(0)


                self.state = 1011
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_labeledstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement" ):
                listener.enterLabeledstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement" ):
                listener.exitLabeledstatement(self)




    def labeledstatement(self):

        localctx = CPP14Parser.LabeledstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_labeledstatement)
        self._la = 0 # Token type
        try:
            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1014
                    self.attributespecifierseq(0)


                self.state = 1017
                self.match(CPP14Parser.Identifier)
                self.state = 1018
                self.match(CPP14Parser.Colon)
                self.state = 1019
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1020
                    self.attributespecifierseq(0)


                self.state = 1023
                self.match(CPP14Parser.Case)
                self.state = 1024
                self.constantexpression()
                self.state = 1025
                self.match(CPP14Parser.Colon)
                self.state = 1026
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1028
                    self.attributespecifierseq(0)


                self.state = 1031
                self.match(CPP14Parser.Default)
                self.state = 1032
                self.match(CPP14Parser.Colon)
                self.state = 1033
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionstatement" ):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionstatement" ):
                listener.exitExpressionstatement(self)




    def expressionstatement(self):

        localctx = CPP14Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_expressionstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276666969) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                self.state = 1036
                self.expression(0)


            self.state = 1039
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_compoundstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundstatement" ):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundstatement" ):
                listener.exitCompoundstatement(self)




    def compoundstatement(self):

        localctx = CPP14Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_compoundstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(CPP14Parser.LeftBrace)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1153449271412916740) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4144226451362332671) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                self.state = 1042
                self.statementseq(0)


            self.state = 1045
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statementseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq" ):
                listener.enterStatementseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq" ):
                listener.exitStatementseq(self)



    def statementseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1054
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1050
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1051
                    self.statement() 
                self.state = 1056
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SelectionstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext,i)


        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement" ):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement" ):
                listener.exitSelectionstatement(self)




    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_selectionstatement)
        try:
            self.state = 1077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.match(CPP14Parser.If)
                self.state = 1058
                self.match(CPP14Parser.LeftParen)
                self.state = 1059
                self.condition()
                self.state = 1060
                self.match(CPP14Parser.RightParen)
                self.state = 1061
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(CPP14Parser.If)
                self.state = 1064
                self.match(CPP14Parser.LeftParen)
                self.state = 1065
                self.condition()
                self.state = 1066
                self.match(CPP14Parser.RightParen)
                self.state = 1067
                self.statement()
                self.state = 1068
                self.match(CPP14Parser.Else)
                self.state = 1069
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(CPP14Parser.Switch)
                self.state = 1072
                self.match(CPP14Parser.LeftParen)
                self.state = 1073
                self.condition()
                self.state = 1074
                self.match(CPP14Parser.RightParen)
                self.state = 1075
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)




    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1080
                    self.attributespecifierseq(0)


                self.state = 1083
                self.declspecifierseq()
                self.state = 1084
                self.declarator()
                self.state = 1085
                self.match(CPP14Parser.Assign)
                self.state = 1086
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1088
                    self.attributespecifierseq(0)


                self.state = 1091
                self.declspecifierseq()
                self.state = 1092
                self.declarator()
                self.state = 1093
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext,0)


        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangedeclarationContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangeinitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement" ):
                listener.enterIterationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement" ):
                listener.exitIterationstatement(self)




    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_iterationstatement)
        self._la = 0 # Token type
        try:
            self.state = 1132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.match(CPP14Parser.While)
                self.state = 1098
                self.match(CPP14Parser.LeftParen)
                self.state = 1099
                self.condition()
                self.state = 1100
                self.match(CPP14Parser.RightParen)
                self.state = 1101
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.match(CPP14Parser.Do)
                self.state = 1104
                self.statement()
                self.state = 1105
                self.match(CPP14Parser.While)
                self.state = 1106
                self.match(CPP14Parser.LeftParen)
                self.state = 1107
                self.expression(0)
                self.state = 1108
                self.match(CPP14Parser.RightParen)
                self.state = 1109
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1111
                self.match(CPP14Parser.For)
                self.state = 1112
                self.match(CPP14Parser.LeftParen)
                self.state = 1113
                self.forinitstatement()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1804220572916908948) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276668285) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 1114
                    self.condition()


                self.state = 1117
                self.match(CPP14Parser.Semi)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276666969) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 1118
                    self.expression(0)


                self.state = 1121
                self.match(CPP14Parser.RightParen)
                self.state = 1122
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1124
                self.match(CPP14Parser.For)
                self.state = 1125
                self.match(CPP14Parser.LeftParen)
                self.state = 1126
                self.forrangedeclaration()
                self.state = 1127
                self.match(CPP14Parser.Colon)
                self.state = 1128
                self.forrangeinitializer()
                self.state = 1129
                self.match(CPP14Parser.RightParen)
                self.state = 1130
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForinitstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement" ):
                listener.enterForinitstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement" ):
                listener.exitForinitstatement(self)




    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_forinitstatement)
        try:
            self.state = 1136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1134
                self.expressionstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangedeclaration" ):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangedeclaration" ):
                listener.exitForrangedeclaration(self)




    def forrangedeclaration(self):

        localctx = CPP14Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_forrangedeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==79:
                self.state = 1138
                self.attributespecifierseq(0)


            self.state = 1141
            self.declspecifierseq()
            self.state = 1142
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangeinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangeinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitializer" ):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitializer" ):
                listener.exitForrangeinitializer(self)




    def forrangeinitializer(self):

        localctx = CPP14Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_forrangeinitializer)
        try:
            self.state = 1146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 10, 11, 12, 16, 18, 20, 22, 23, 29, 31, 37, 38, 41, 42, 43, 44, 50, 52, 53, 54, 57, 61, 63, 64, 67, 68, 70, 73, 75, 77, 79, 83, 84, 85, 89, 90, 91, 92, 112, 113, 119, 124, 125, 131, 132, 133, 134, 135, 136, 137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.expression(0)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement" ):
                listener.enterJumpstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement" ):
                listener.exitJumpstatement(self)




    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_jumpstatement)
        self._la = 0 # Token type
        try:
            self.state = 1164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.match(CPP14Parser.Break)
                self.state = 1149
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1150
                self.match(CPP14Parser.Continue)
                self.state = 1151
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1152
                self.match(CPP14Parser.Return)
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276666969) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 1153
                    self.expression(0)


                self.state = 1156
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1157
                self.match(CPP14Parser.Return)
                self.state = 1158
                self.bracedinitlist()
                self.state = 1159
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1161
                self.match(CPP14Parser.Goto)
                self.state = 1162
                self.match(CPP14Parser.Identifier)
                self.state = 1163
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationstatement" ):
                listener.enterDeclarationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationstatement" ):
                listener.exitDeclarationstatement(self)




    def declarationstatement(self):

        localctx = CPP14Parser.DeclarationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declarationstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.blockdeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq" ):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq" ):
                listener.exitDeclarationseq(self)



    def declarationseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1175
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1171
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1172
                    self.declaration() 
                self.state = 1177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitinstantiationContext,0)


        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitspecializationContext,0)


        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14Parser.LinkagespecificationContext,0)


        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacedefinitionContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def attributedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AttributedeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_declaration)
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1178
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1179
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1180
                self.templatedeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1181
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1182
                self.explicitspecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1183
                self.linkagespecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1184
                self.namespacedefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1185
                self.emptydeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1186
                self.attributedeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.AsmdefinitionContext,0)


        def namespacealiasdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasdefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def usingdirective(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdirectiveContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def opaqueenumdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.OpaqueenumdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration" ):
                listener.enterBlockdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration" ):
                listener.exitBlockdeclaration(self)




    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_blockdeclaration)
        try:
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1189
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1190
                self.asmdefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1191
                self.namespacealiasdefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1192
                self.usingdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1193
                self.usingdirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1194
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1195
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1196
                self.opaqueenumdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_aliasdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasdeclaration" ):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasdeclaration" ):
                listener.exitAliasdeclaration(self)




    def aliasdeclaration(self):

        localctx = CPP14Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_aliasdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(CPP14Parser.Using)
            self.state = 1200
            self.match(CPP14Parser.Identifier)
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==79:
                self.state = 1201
                self.attributespecifierseq(0)


            self.state = 1204
            self.match(CPP14Parser.Assign)
            self.state = 1205
            self.typeid()
            self.state = 1206
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpledeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration" ):
                listener.enterSimpledeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration" ):
                listener.exitSimpledeclaration(self)




    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_simpledeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 10, 11, 12, 13, 14, 15, 18, 22, 25, 26, 28, 31, 33, 36, 37, 38, 39, 44, 49, 52, 53, 55, 58, 62, 66, 68, 69, 70, 72, 73, 74, 75, 77, 85, 89, 91, 110, 119, 120, 123, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1208
                    self.declspecifierseq()


                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==44 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 215512868999425) != 0):
                    self.state = 1211
                    self.initdeclaratorlist(0)


                self.state = 1214
                self.match(CPP14Parser.Semi)
                pass
            elif token in [2, 79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.attributespecifierseq(0)
                self.state = 1217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1216
                    self.declspecifierseq()


                self.state = 1219
                self.initdeclaratorlist(0)
                self.state = 1220
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_assertdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_static_assertdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_assertdeclaration" ):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_assertdeclaration" ):
                listener.exitStatic_assertdeclaration(self)




    def static_assertdeclaration(self):

        localctx = CPP14Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.match(CPP14Parser.Static_assert)
            self.state = 1225
            self.match(CPP14Parser.LeftParen)
            self.state = 1226
            self.constantexpression()
            self.state = 1227
            self.match(CPP14Parser.Comma)
            self.state = 1228
            self.match(CPP14Parser.Stringliteral)
            self.state = 1229
            self.match(CPP14Parser.RightParen)
            self.state = 1230
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptydeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_emptydeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptydeclaration" ):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptydeclaration" ):
                listener.exitEmptydeclaration(self)




    def emptydeclaration(self):

        localctx = CPP14Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedeclaration" ):
                listener.enterAttributedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedeclaration" ):
                listener.exitAttributedeclaration(self)




    def attributedeclaration(self):

        localctx = CPP14Parser.AttributedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_attributedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.attributespecifierseq(0)
            self.state = 1235
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageclassspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.StorageclassspecifierContext,0)


        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def functionspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionspecifierContext,0)


        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier" ):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier" ):
                listener.exitDeclspecifier(self)




    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_declspecifier)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28, 39, 49, 55, 62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.storageclassspecifier()
                pass
            elif token in [5, 6, 10, 11, 12, 13, 14, 18, 22, 25, 31, 37, 38, 52, 53, 58, 68, 69, 70, 73, 74, 75, 119, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.typespecifier()
                pass
            elif token in [26, 36, 72]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1239
                self.functionspecifier()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1240
                self.match(CPP14Parser.Friend)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1241
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1242
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq" ):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq" ):
                listener.exitDeclspecifierseq(self)




    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_declspecifierseq)
        try:
            self.state = 1252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.declspecifier()
                self.state = 1247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1246
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.declspecifier()
                self.state = 1250
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageclassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_storageclassspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier" ):
                listener.enterStorageclassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier" ):
                listener.exitStorageclassspecifier(self)




    def storageclassspecifier(self):

        localctx = CPP14Parser.StorageclassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_storageclassspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4648278315424022528) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier" ):
                listener.enterFunctionspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier" ):
                listener.exitFunctionspecifier(self)




    def functionspecifier(self):

        localctx = CPP14Parser.FunctionspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            _la = self._input.LA(1)
            if not(((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 70368744178689) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typedefname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefname" ):
                listener.enterTypedefname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefname" ):
                listener.exitTypedefname(self)




    def typedefname(self):

        localctx = CPP14Parser.TypedefnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_typedefname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def classspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassspecifierContext,0)


        def enumspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.EnumspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier" ):
                listener.enterTypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier" ):
                listener.exitTypespecifier(self)




    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_typespecifier)
        try:
            self.state = 1263
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1260
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.classspecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1262
                self.enumspecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)


        def elaboratedtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ElaboratedtypespecifierContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)


        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier" ):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier" ):
                listener.exitTrailingtypespecifier(self)




    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_trailingtypespecifier)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 10, 11, 12, 18, 22, 31, 37, 38, 52, 53, 70, 73, 75, 119, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.simpletypespecifier()
                pass
            elif token in [13, 25, 58, 69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1266
                self.elaboratedtypespecifier()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                self.typenamespecifier()
                pass
            elif token in [14, 74]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1268
                self.cvqualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq" ):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq" ):
                listener.exitTypespecifierseq(self)




    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typespecifierseq)
        try:
            self.state = 1278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.typespecifier()
                self.state = 1273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1272
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1275
                self.typespecifier()
                self.state = 1276
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq" ):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq" ):
                listener.exitTrailingtypespecifierseq(self)




    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1280
                self.trailingtypespecifier()
                self.state = 1282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 1281
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1284
                self.trailingtypespecifier()
                self.state = 1285
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typename(self):
            return self.getTypedRuleContext(CPP14Parser.TypenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier" ):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier" ):
                listener.exitSimpletypespecifier(self)




    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_simpletypespecifier)
        try:
            self.state = 1312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1289
                    self.nestednamespecifier(0)


                self.state = 1292
                self.typename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.nestednamespecifier(0)
                self.state = 1294
                self.match(CPP14Parser.Template)
                self.state = 1295
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1297
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1298
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1299
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1300
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1301
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1302
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1303
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1304
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1305
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1306
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1307
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1308
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1309
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1310
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1311
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def enumname(self):
            return self.getTypedRuleContext(CPP14Parser.EnumnameContext,0)


        def typedefname(self):
            return self.getTypedRuleContext(CPP14Parser.TypedefnameContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypename" ):
                listener.enterTypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypename" ):
                listener.exitTypename(self)




    def typename(self):

        localctx = CPP14Parser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typename)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1314
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.enumname()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1316
                self.typedefname()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1317
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecltypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier" ):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier" ):
                listener.exitDecltypespecifier(self)




    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_decltypespecifier)
        try:
            self.state = 1329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.match(CPP14Parser.Decltype)
                self.state = 1321
                self.match(CPP14Parser.LeftParen)
                self.state = 1322
                self.expression(0)
                self.state = 1323
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                self.match(CPP14Parser.Decltype)
                self.state = 1326
                self.match(CPP14Parser.LeftParen)
                self.state = 1327
                self.match(CPP14Parser.Auto)
                self.state = 1328
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaboratedtypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elaboratedtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier" ):
                listener.enterElaboratedtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier" ):
                listener.exitElaboratedtypespecifier(self)




    def elaboratedtypespecifier(self):

        localctx = CPP14Parser.ElaboratedtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_elaboratedtypespecifier)
        self._la = 0 # Token type
        try:
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1331
                self.classkey()
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1332
                    self.attributespecifierseq(0)


                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1335
                    self.nestednamespecifier(0)


                self.state = 1338
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1340
                self.classkey()
                self.state = 1341
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1343
                self.classkey()
                self.state = 1344
                self.nestednamespecifier(0)
                self.state = 1346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 1345
                    self.match(CPP14Parser.Template)


                self.state = 1348
                self.simpletemplateid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1350
                self.match(CPP14Parser.Enum)
                self.state = 1352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 1351
                    self.nestednamespecifier(0)


                self.state = 1354
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumname" ):
                listener.enterEnumname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumname" ):
                listener.exitEnumname(self)




    def enumname(self):

        localctx = CPP14Parser.EnumnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_enumname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumhead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier" ):
                listener.enterEnumspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier" ):
                listener.exitEnumspecifier(self)




    def enumspecifier(self):

        localctx = CPP14Parser.EnumspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_enumspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self.enumhead()
                self.state = 1360
                self.match(CPP14Parser.LeftBrace)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 1361
                    self.enumeratorlist(0)


                self.state = 1364
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.enumhead()
                self.state = 1367
                self.match(CPP14Parser.LeftBrace)
                self.state = 1368
                self.enumeratorlist(0)
                self.state = 1369
                self.match(CPP14Parser.Comma)
                self.state = 1370
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead" ):
                listener.enterEnumhead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead" ):
                listener.exitEnumhead(self)




    def enumhead(self):

        localctx = CPP14Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_enumhead)
        self._la = 0 # Token type
        try:
            self.state = 1393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1374
                self.enumkey()
                self.state = 1376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1375
                    self.attributespecifierseq(0)


                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 1378
                    self.match(CPP14Parser.Identifier)


                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1381
                    self.enumbase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.enumkey()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1385
                    self.attributespecifierseq(0)


                self.state = 1388
                self.nestednamespecifier(0)
                self.state = 1389
                self.match(CPP14Parser.Identifier)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1390
                    self.enumbase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueenumdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_opaqueenumdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueenumdeclaration" ):
                listener.enterOpaqueenumdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueenumdeclaration" ):
                listener.exitOpaqueenumdeclaration(self)




    def opaqueenumdeclaration(self):

        localctx = CPP14Parser.OpaqueenumdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_opaqueenumdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.enumkey()
            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==79:
                self.state = 1396
                self.attributespecifierseq(0)


            self.state = 1399
            self.match(CPP14Parser.Identifier)
            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 1400
                self.enumbase()


            self.state = 1403
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumkeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey" ):
                listener.enterEnumkey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey" ):
                listener.exitEnumkey(self)




    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumkey)
        try:
            self.state = 1410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.match(CPP14Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.match(CPP14Parser.Enum)
                self.state = 1407
                self.match(CPP14Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1408
                self.match(CPP14Parser.Enum)
                self.state = 1409
                self.match(CPP14Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)




    def enumbase(self):

        localctx = CPP14Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self.match(CPP14Parser.Colon)
            self.state = 1413
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratordefinitionContext,0)


        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist" ):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist" ):
                listener.exitEnumeratorlist(self)



    def enumeratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1418
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1419
                    self.match(CPP14Parser.Comma)
                    self.state = 1420
                    self.enumeratordefinition() 
                self.state = 1425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratordefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratordefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition" ):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition" ):
                listener.exitEnumeratordefinition(self)




    def enumeratordefinition(self):

        localctx = CPP14Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumeratordefinition)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1426
                self.enumerator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1427
                self.enumerator()
                self.state = 1428
                self.match(CPP14Parser.Assign)
                self.state = 1429
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = CPP14Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def namespacealias(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename" ):
                listener.enterNamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename" ):
                listener.exitNamespacename(self)




    def namespacename(self):

        localctx = CPP14Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_namespacename)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1435
                self.originalnamespacename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1436
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacename" ):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacename" ):
                listener.exitOriginalnamespacename(self)




    def originalnamespacename(self):

        localctx = CPP14Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamednamespacedefinitionContext,0)


        def unnamednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.UnnamednamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition" ):
                listener.enterNamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition" ):
                listener.exitNamespacedefinition(self)




    def namespacedefinition(self):

        localctx = CPP14Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_namespacedefinition)
        try:
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1441
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.unnamednamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacedefinitionContext,0)


        def extensionnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.ExtensionnamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition" ):
                listener.enterNamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition" ):
                listener.exitNamednamespacedefinition(self)




    def namednamespacedefinition(self):

        localctx = CPP14Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namednamespacedefinition)
        try:
            self.state = 1447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.originalnamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.extensionnamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacedefinition" ):
                listener.enterOriginalnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacedefinition" ):
                listener.exitOriginalnamespacedefinition(self)




    def originalnamespacedefinition(self):

        localctx = CPP14Parser.OriginalnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_originalnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1449
                self.match(CPP14Parser.Inline)


            self.state = 1452
            self.match(CPP14Parser.Namespace)
            self.state = 1453
            self.match(CPP14Parser.Identifier)
            self.state = 1454
            self.match(CPP14Parser.LeftBrace)
            self.state = 1455
            self.namespacebody()
            self.state = 1456
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionnamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_extensionnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionnamespacedefinition" ):
                listener.enterExtensionnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionnamespacedefinition" ):
                listener.exitExtensionnamespacedefinition(self)




    def extensionnamespacedefinition(self):

        localctx = CPP14Parser.ExtensionnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_extensionnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1458
                self.match(CPP14Parser.Inline)


            self.state = 1461
            self.match(CPP14Parser.Namespace)
            self.state = 1462
            self.originalnamespacename()
            self.state = 1463
            self.match(CPP14Parser.LeftBrace)
            self.state = 1464
            self.namespacebody()
            self.state = 1465
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamednamespacedefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unnamednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamednamespacedefinition" ):
                listener.enterUnnamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamednamespacedefinition" ):
                listener.exitUnnamednamespacedefinition(self)




    def unnamednamespacedefinition(self):

        localctx = CPP14Parser.UnnamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_unnamednamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1467
                self.match(CPP14Parser.Inline)


            self.state = 1470
            self.match(CPP14Parser.Namespace)
            self.state = 1471
            self.match(CPP14Parser.LeftBrace)
            self.state = 1472
            self.namespacebody()
            self.state = 1473
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacebodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacebody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacebody" ):
                listener.enterNamespacebody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacebody" ):
                listener.exitNamespacebody(self)




    def namespacebody(self):

        localctx = CPP14Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_namespacebody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6175017772679232628) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 459384754220313597) != 0):
                self.state = 1475
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealias" ):
                listener.enterNamespacealias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealias" ):
                listener.exitNamespacealias(self)




    def namespacealias(self):

        localctx = CPP14Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealiasdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealiasdefinition" ):
                listener.enterNamespacealiasdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealiasdefinition" ):
                listener.exitNamespacealiasdefinition(self)




    def namespacealiasdefinition(self):

        localctx = CPP14Parser.NamespacealiasdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_namespacealiasdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.match(CPP14Parser.Namespace)
            self.state = 1481
            self.match(CPP14Parser.Identifier)
            self.state = 1482
            self.match(CPP14Parser.Assign)
            self.state = 1483
            self.qualifiednamespacespecifier()
            self.state = 1484
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiednamespacespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)




    def qualifiednamespacespecifier(self):

        localctx = CPP14Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1486
                self.nestednamespecifier(0)


            self.state = 1489
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration" ):
                listener.enterUsingdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration" ):
                listener.exitUsingdeclaration(self)




    def usingdeclaration(self):

        localctx = CPP14Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_usingdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                self.match(CPP14Parser.Using)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1492
                    self.match(CPP14Parser.Typename)


                self.state = 1495
                self.nestednamespecifier(0)
                self.state = 1496
                self.unqualifiedid()
                self.state = 1497
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1499
                self.match(CPP14Parser.Using)
                self.state = 1500
                self.match(CPP14Parser.Doublecolon)
                self.state = 1501
                self.unqualifiedid()
                self.state = 1502
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdirective" ):
                listener.enterUsingdirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdirective" ):
                listener.exitUsingdirective(self)




    def usingdirective(self):

        localctx = CPP14Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_usingdirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==79:
                self.state = 1506
                self.attributespecifierseq(0)


            self.state = 1509
            self.match(CPP14Parser.Using)
            self.state = 1510
            self.match(CPP14Parser.Namespace)
            self.state = 1512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1511
                self.nestednamespecifier(0)


            self.state = 1514
            self.namespacename()
            self.state = 1515
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmdefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_asmdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmdefinition" ):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmdefinition" ):
                listener.exitAsmdefinition(self)




    def asmdefinition(self):

        localctx = CPP14Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(CPP14Parser.Asm)
            self.state = 1518
            self.match(CPP14Parser.LeftParen)
            self.state = 1519
            self.match(CPP14Parser.Stringliteral)
            self.state = 1520
            self.match(CPP14Parser.RightParen)
            self.state = 1521
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkagespecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_linkagespecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification" ):
                listener.enterLinkagespecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification" ):
                listener.exitLinkagespecification(self)




    def linkagespecification(self):

        localctx = CPP14Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_linkagespecification)
        self._la = 0 # Token type
        try:
            self.state = 1533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1523
                self.match(CPP14Parser.Extern)
                self.state = 1524
                self.match(CPP14Parser.Stringliteral)
                self.state = 1525
                self.match(CPP14Parser.LeftBrace)
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6175017772679232628) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 459384754220313597) != 0):
                    self.state = 1526
                    self.declarationseq(0)


                self.state = 1529
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1530
                self.match(CPP14Parser.Extern)
                self.state = 1531
                self.match(CPP14Parser.Stringliteral)
                self.state = 1532
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributespecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq" ):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq" ):
                listener.exitAttributespecifierseq(self)



    def attributespecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 206
        self.enterRecursionRule(localctx, 206, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1542
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1538
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1539
                    self.attributespecifier() 
                self.state = 1544
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBracket)
            else:
                return self.getToken(CPP14Parser.LeftBracket, i)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBracket)
            else:
                return self.getToken(CPP14Parser.RightBracket, i)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AlignmentspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier" ):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier" ):
                listener.exitAttributespecifier(self)




    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_attributespecifier)
        try:
            self.state = 1552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.match(CPP14Parser.LeftBracket)
                self.state = 1546
                self.match(CPP14Parser.LeftBracket)
                self.state = 1547
                self.attributelist(0)
                self.state = 1548
                self.match(CPP14Parser.RightBracket)
                self.state = 1549
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1551
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_alignmentspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier" ):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier" ):
                listener.exitAlignmentspecifier(self)




    def alignmentspecifier(self):

        localctx = CPP14Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self.match(CPP14Parser.Alignas)
                self.state = 1555
                self.match(CPP14Parser.LeftParen)
                self.state = 1556
                self.typeid()
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 1557
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1560
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.match(CPP14Parser.Alignas)
                self.state = 1563
                self.match(CPP14Parser.LeftParen)
                self.state = 1564
                self.constantexpression()
                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 1565
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1568
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributelistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist" ):
                listener.enterAttributelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist" ):
                listener.exitAttributelist(self)



    def attributelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1573
                    self.attribute()


                pass

            elif la_ == 2:
                self.state = 1576
                self.attribute()
                self.state = 1577
                self.match(CPP14Parser.Ellipsis)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1591
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1581
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1582
                        self.match(CPP14Parser.Comma)
                        self.state = 1584
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                        if la_ == 1:
                            self.state = 1583
                            self.attribute()


                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1586
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1587
                        self.match(CPP14Parser.Comma)
                        self.state = 1588
                        self.attribute()
                        self.state = 1589
                        self.match(CPP14Parser.Ellipsis)
                        pass

             
                self.state = 1595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributetokenContext,0)


        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeargumentclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self.attributetoken()
            self.state = 1598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1597
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributetokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributescopedtokenContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributetoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken" ):
                listener.enterAttributetoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken" ):
                listener.exitAttributetoken(self)




    def attributetoken(self):

        localctx = CPP14Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_attributetoken)
        try:
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1601
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributescopedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14Parser.AttributenamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributescopedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributescopedtoken" ):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributescopedtoken" ):
                listener.exitAttributescopedtoken(self)




    def attributescopedtoken(self):

        localctx = CPP14Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1604
            self.attributenamespace()
            self.state = 1605
            self.match(CPP14Parser.Doublecolon)
            self.state = 1606
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributenamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributenamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributenamespace" ):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributenamespace" ):
                listener.exitAttributenamespace(self)




    def attributenamespace(self):

        localctx = CPP14Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeargumentclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeargumentclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeargumentclause" ):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeargumentclause" ):
                listener.exitAttributeargumentclause(self)




    def attributeargumentclause(self):

        localctx = CPP14Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(CPP14Parser.LeftParen)
            self.state = 1611
            self.balancedtokenseq(0)
            self.state = 1612
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedtokenseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext,0)


        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq" ):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq" ):
                listener.exitBalancedtokenseq(self)



    def balancedtokenseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 224
        self.enterRecursionRule(localctx, 224, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1615
                self.balancedtoken()


            self._ctx.stop = self._input.LT(-1)
            self.state = 1622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1618
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1619
                    self.balancedtoken() 
                self.state = 1624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BalancedtokenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken" ):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken" ):
                listener.exitBalancedtoken(self)




    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_balancedtoken)
        try:
            self.state = 1637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1625
                self.match(CPP14Parser.LeftParen)
                self.state = 1626
                self.balancedtokenseq(0)
                self.state = 1627
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.match(CPP14Parser.LeftBracket)
                self.state = 1630
                self.balancedtokenseq(0)
                self.state = 1631
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1633
                self.match(CPP14Parser.LeftBrace)
                self.state = 1634
                self.balancedtokenseq(0)
                self.state = 1635
                self.match(CPP14Parser.RightBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist" ):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist" ):
                listener.exitInitdeclaratorlist(self)



    def initdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 228
        self.enterRecursionRule(localctx, 228, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1642
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1643
                    self.match(CPP14Parser.Comma)
                    self.state = 1644
                    self.initdeclarator() 
                self.state = 1649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclarator" ):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclarator" ):
                listener.exitInitdeclarator(self)




    def initdeclarator(self):

        localctx = CPP14Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.declarator()
            self.state = 1652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.state = 1651
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_declarator)
        try:
            self.state = 1659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.noptrdeclarator(0)
                self.state = 1656
                self.parametersandqualifiers()
                self.state = 1657
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator" ):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator" ):
                listener.exitPtrdeclarator(self)




    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_ptrdeclarator)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662
                self.ptroperator()
                self.state = 1663
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratoridContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator" ):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator" ):
                listener.exitNoptrdeclarator(self)



    def noptrdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 236
        self.enterRecursionRule(localctx, 236, self.RULE_noptrdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 44, 91, 119, 123, 124]:
                self.state = 1668
                self.declaratorid()
                self.state = 1670
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1669
                    self.attributespecifierseq(0)


                pass
            elif token in [77]:
                self.state = 1672
                self.match(CPP14Parser.LeftParen)
                self.state = 1673
                self.ptrdeclarator()
                self.state = 1674
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1689
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1678
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1679
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1680
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1681
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1683
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2482642694952000616) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276666969) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                            self.state = 1682
                            self.constantexpression()


                        self.state = 1685
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1687
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                        if la_ == 1:
                            self.state = 1686
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersandqualifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext,0)


        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersandqualifiers" ):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersandqualifiers" ):
                listener.exitParametersandqualifiers(self)




    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.match(CPP14Parser.LeftParen)
            self.state = 1695
            self.parameterdeclarationclause()
            self.state = 1696
            self.match(CPP14Parser.RightParen)
            self.state = 1698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1697
                self.cvqualifierseq()


            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1700
                self.refqualifier()


            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1703
                self.exceptionspecification()


            self.state = 1707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1706
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingreturntypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingreturntype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingreturntype" ):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingreturntype" ):
                listener.exitTrailingreturntype(self)




    def trailingreturntype(self):

        localctx = CPP14Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.match(CPP14Parser.Arrow)
            self.state = 1710
            self.trailingtypespecifierseq()
            self.state = 1712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1711
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtroperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator" ):
                listener.enterPtroperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator" ):
                listener.exitPtroperator(self)




    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_ptroperator)
        try:
            self.state = 1737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1714
                self.match(CPP14Parser.Star)
                self.state = 1716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1715
                    self.attributespecifierseq(0)


                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self.cvqualifierseq()


                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1721
                self.match(CPP14Parser.And)
                self.state = 1723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1722
                    self.attributespecifierseq(0)


                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1725
                self.match(CPP14Parser.AndAnd)
                self.state = 1727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1726
                    self.attributespecifierseq(0)


                pass
            elif token in [18, 119, 124]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1729
                self.nestednamespecifier(0)
                self.state = 1730
                self.match(CPP14Parser.Star)
                self.state = 1732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1731
                    self.attributespecifierseq(0)


                self.state = 1735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1734
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)




    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self.cvqualifier()
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.state = 1740
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier" ):
                listener.enterCvqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier" ):
                listener.exitCvqualifier(self)




    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_cvqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            _la = self._input.LA(1)
            if not(_la==14 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier" ):
                listener.enterRefqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier" ):
                listener.exitRefqualifier(self)




    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            _la = self._input.LA(1)
            if not(_la==89 or _la==110):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)




    def declaratorid(self):

        localctx = CPP14Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 1747
                self.match(CPP14Parser.Ellipsis)


            self.state = 1750
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeid" ):
                listener.enterTypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeid" ):
                listener.exitTypeid(self)




    def typeid(self):

        localctx = CPP14Parser.TypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_typeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self.typespecifierseq()
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1753
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator" ):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator" ):
                listener.exitAbstractdeclarator(self)




    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_abstractdeclarator)
        try:
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1756
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1758
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1757
                    self.noptrabstractdeclarator(0)


                self.state = 1760
                self.parametersandqualifiers()
                self.state = 1761
                self.trailingreturntype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1763
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator" ):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator" ):
                listener.exitPtrabstractdeclarator(self)




    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.noptrabstractdeclarator(0)
                pass
            elif token in [18, 85, 89, 110, 119, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1767
                self.ptroperator()
                self.state = 1769
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                if la_ == 1:
                    self.state = 1768
                    self.ptrabstractdeclarator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator" ):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator" ):
                listener.exitNoptrabstractdeclarator(self)



    def noptrabstractdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 258
        self.enterRecursionRule(localctx, 258, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 1774
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1775
                self.match(CPP14Parser.LeftBracket)
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2482642694952000616) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276666969) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 1776
                    self.constantexpression()


                self.state = 1779
                self.match(CPP14Parser.RightBracket)
                self.state = 1781
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1780
                    self.attributespecifierseq(0)


                pass

            elif la_ == 3:
                self.state = 1783
                self.match(CPP14Parser.LeftParen)
                self.state = 1784
                self.ptrabstractdeclarator()
                self.state = 1785
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,203,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1800
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1789
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1790
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1791
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1792
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1794
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2482642694952000616) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276666969) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                            self.state = 1793
                            self.constantexpression()


                        self.state = 1796
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1798
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                        if la_ == 1:
                            self.state = 1797
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AbstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator" ):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator" ):
                listener.exitAbstractpackdeclarator(self)




    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1805
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [18, 85, 89, 110, 119, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1806
                self.ptroperator()
                self.state = 1807
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractpackdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator" ):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator" ):
                listener.exitNoptrabstractpackdeclarator(self)



    def noptrabstractpackdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 262
        self.enterRecursionRule(localctx, 262, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1827
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1825
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1814
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1815
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1816
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1817
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1819
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2482642694952000616) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276666969) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                            self.state = 1818
                            self.constantexpression()


                        self.state = 1821
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1823
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
                        if la_ == 1:
                            self.state = 1822
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause" ):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause" ):
                listener.exitParameterdeclarationclause(self)




    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_parameterdeclarationclause)
        self._la = 0 # Token type
        try:
            self.state = 1840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4950019982336785508) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 297237575406461917) != 0):
                    self.state = 1830
                    self.parameterdeclarationlist(0)


                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 1833
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1836
                self.parameterdeclarationlist(0)
                self.state = 1837
                self.match(CPP14Parser.Comma)
                self.state = 1838
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterdeclarationlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist" ):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist" ):
                listener.exitParameterdeclarationlist(self)



    def parameterdeclarationlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 266
        self.enterRecursionRule(localctx, 266, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1845
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1846
                    self.match(CPP14Parser.Comma)
                    self.state = 1847
                    self.parameterdeclaration() 
                self.state = 1852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration" ):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration" ):
                listener.exitParameterdeclaration(self)




    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_parameterdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1853
                    self.attributespecifierseq(0)


                self.state = 1856
                self.declspecifierseq()
                self.state = 1857
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1859
                    self.attributespecifierseq(0)


                self.state = 1862
                self.declspecifierseq()
                self.state = 1863
                self.declarator()
                self.state = 1864
                self.match(CPP14Parser.Assign)
                self.state = 1865
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1867
                    self.attributespecifierseq(0)


                self.state = 1870
                self.declspecifierseq()
                self.state = 1872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1871
                    self.abstractdeclarator()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1874
                    self.attributespecifierseq(0)


                self.state = 1877
                self.declspecifierseq()
                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 215512868983045) != 0):
                    self.state = 1878
                    self.abstractdeclarator()


                self.state = 1881
                self.match(CPP14Parser.Assign)
                self.state = 1882
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)




    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==79:
                self.state = 1886
                self.attributespecifierseq(0)


            self.state = 1890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1889
                self.declspecifierseq()


            self.state = 1892
            self.declarator()
            self.state = 1894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or _la==45:
                self.state = 1893
                self.virtspecifierseq(0)


            self.state = 1896
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiontryblockContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody" ):
                listener.enterFunctionbody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody" ):
                listener.exitFunctionbody(self)




    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_functionbody)
        self._la = 0 # Token type
        try:
            self.state = 1909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1898
                    self.ctorinitializer()


                self.state = 1901
                self.compoundstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1902
                self.functiontryblock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1903
                self.match(CPP14Parser.Assign)
                self.state = 1904
                self.match(CPP14Parser.Default)
                self.state = 1905
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1906
                self.match(CPP14Parser.Assign)
                self.state = 1907
                self.match(CPP14Parser.Delete)
                self.state = 1908
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_initializer)
        try:
            self.state = 1916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [81, 93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1911
                self.braceorequalinitializer()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1912
                self.match(CPP14Parser.LeftParen)
                self.state = 1913
                self.expressionlist()
                self.state = 1914
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceorequalinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer" ):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer" ):
                listener.exitBraceorequalinitializer(self)




    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_braceorequalinitializer)
        try:
            self.state = 1921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1918
                self.match(CPP14Parser.Assign)
                self.state = 1919
                self.initializerclause()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1920
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause" ):
                listener.enterInitializerclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause" ):
                listener.exitInitializerclause(self)




    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_initializerclause)
        try:
            self.state = 1925
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 10, 11, 12, 16, 18, 20, 22, 23, 29, 31, 37, 38, 41, 42, 43, 44, 50, 52, 53, 54, 57, 61, 63, 64, 67, 68, 70, 73, 75, 77, 79, 83, 84, 85, 89, 90, 91, 92, 112, 113, 119, 124, 125, 131, 132, 133, 134, 135, 136, 137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1923
                self.assignmentexpression()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist" ):
                listener.enterInitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist" ):
                listener.exitInitializerlist(self)



    def initializerlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 280
        self.enterRecursionRule(localctx, 280, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1928
            self.initializerclause()
            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1929
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1932
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1933
                    self.match(CPP14Parser.Comma)
                    self.state = 1934
                    self.initializerclause()
                    self.state = 1936
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
                    if la_ == 1:
                        self.state = 1935
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 1942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BracedinitlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist" ):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist" ):
                listener.exitBracedinitlist(self)




    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_bracedinitlist)
        self._la = 0 # Token type
        try:
            self.state = 1952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1943
                self.match(CPP14Parser.LeftBrace)
                self.state = 1944
                self.initializerlist(0)
                self.state = 1946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 1945
                    self.match(CPP14Parser.Comma)


                self.state = 1948
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1950
                self.match(CPP14Parser.LeftBrace)
                self.state = 1951
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname" ):
                listener.enterClassname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname" ):
                listener.exitClassname(self)




    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_classname)
        try:
            self.state = 1956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1954
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1955
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassspecifier" ):
                listener.enterClassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassspecifier" ):
                listener.exitClassspecifier(self)




    def classspecifier(self):

        localctx = CPP14Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_classspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1958
            self.classhead()
            self.state = 1959
            self.match(CPP14Parser.LeftBrace)
            self.state = 1961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6175509254376848484) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 463888353847684093) != 0):
                self.state = 1960
                self.memberspecification()


            self.state = 1963
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def classheadname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadnameContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassvirtspecifierContext,0)


        def baseclause(self):
            return self.getTypedRuleContext(CPP14Parser.BaseclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead" ):
                listener.enterClasshead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead" ):
                listener.exitClasshead(self)




    def classhead(self):

        localctx = CPP14Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_classhead)
        self._la = 0 # Token type
        try:
            self.state = 1983
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1965
                self.classkey()
                self.state = 1967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1966
                    self.attributespecifierseq(0)


                self.state = 1969
                self.classheadname()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1970
                    self.classvirtspecifier()


                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1973
                    self.baseclause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1976
                self.classkey()
                self.state = 1978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 1977
                    self.attributespecifierseq(0)


                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 1980
                    self.baseclause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classheadname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassheadname" ):
                listener.enterClassheadname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassheadname" ):
                listener.exitClassheadname(self)




    def classheadname(self):

        localctx = CPP14Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.state = 1985
                self.nestednamespecifier(0)


            self.state = 1988
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassvirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classvirtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassvirtspecifier" ):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassvirtspecifier" ):
                listener.exitClassvirtspecifier(self)




    def classvirtspecifier(self):

        localctx = CPP14Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.match(CPP14Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClasskeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey" ):
                listener.enterClasskey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey" ):
                listener.exitClasskey(self)




    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_classkey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            _la = self._input.LA(1)
            if not(((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & 72092778410016769) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext,0)


        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification" ):
                listener.enterMemberspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification" ):
                listener.exitMemberspecification(self)




    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_memberspecification)
        self._la = 0 # Token type
        try:
            self.state = 2003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 5, 6, 10, 11, 12, 13, 14, 15, 18, 22, 25, 26, 28, 31, 33, 36, 37, 38, 39, 44, 49, 52, 53, 55, 56, 58, 60, 62, 66, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 85, 89, 91, 110, 118, 119, 120, 123, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1994
                self.memberdeclaration()
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6175509254376848484) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 463888353847684093) != 0):
                    self.state = 1995
                    self.memberspecification()


                pass
            elif token in [46, 47, 48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1998
                self.accessspecifier()
                self.state = 1999
                self.match(CPP14Parser.Colon)
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6175509254376848484) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 463888353847684093) != 0):
                    self.state = 2000
                    self.memberspecification()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration" ):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration" ):
                listener.exitMemberdeclaration(self)




    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 2005
                    self.attributespecifierseq(0)


                self.state = 2009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 2008
                    self.declspecifierseq()


                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17592186306564) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 217711892254981) != 0):
                    self.state = 2011
                    self.memberdeclaratorlist(0)


                self.state = 2014
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2015
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2016
                self.usingdeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2017
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2018
                self.templatedeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2019
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2020
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclaratorlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlist" ):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlist" ):
                listener.exitMemberdeclaratorlist(self)



    def memberdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 300
        self.enterRecursionRule(localctx, 300, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2031
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2026
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2027
                    self.match(CPP14Parser.Comma)
                    self.state = 2028
                    self.memberdeclarator() 
                self.state = 2033
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MemberdeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext,0)


        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator" ):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator" ):
                listener.exitMemberdeclarator(self)




    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_memberdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2034
                self.declarator()
                self.state = 2036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2035
                    self.virtspecifierseq(0)


                self.state = 2039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 2038
                    self.purespecifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2041
                self.declarator()
                self.state = 2043
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 2042
                    self.braceorequalinitializer()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 2045
                    self.match(CPP14Parser.Identifier)


                self.state = 2049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 2048
                    self.attributespecifierseq(0)


                self.state = 2051
                self.match(CPP14Parser.Colon)
                self.state = 2052
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtspecifierseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq" ):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq" ):
                listener.exitVirtspecifierseq(self)



    def virtspecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 304
        self.enterRecursionRule(localctx, 304, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2062
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2058
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2059
                    self.virtspecifier() 
                self.state = 2064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VirtspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier" ):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier" ):
                listener.exitVirtspecifier(self)




    def virtspecifier(self):

        localctx = CPP14Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_virtspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            _la = self._input.LA(1)
            if not(_la==30 or _la==45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurespecifier" ):
                listener.enterPurespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurespecifier" ):
                listener.exitPurespecifier(self)




    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.match(CPP14Parser.Assign)
            self.state = 2068
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if((None if localctx.val is None else localctx.val.text).compareTo("0")!=0) throw new InputMismatchException(this);
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseclauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_baseclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseclause" ):
                listener.enterBaseclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseclause" ):
                listener.exitBaseclause(self)




    def baseclause(self):

        localctx = CPP14Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(CPP14Parser.Colon)
            self.state = 2072
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasespecifierlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist" ):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist" ):
                listener.exitBasespecifierlist(self)



    def basespecifierlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 312
        self.enterRecursionRule(localctx, 312, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self.basespecifier()
            self.state = 2077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 2076
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2087
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2079
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2080
                    self.match(CPP14Parser.Comma)
                    self.state = 2081
                    self.basespecifier()
                    self.state = 2083
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
                    if la_ == 1:
                        self.state = 2082
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2089
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasetypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier" ):
                listener.enterBasespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier" ):
                listener.exitBasespecifier(self)




    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_basespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 2090
                    self.attributespecifierseq(0)


                self.state = 2093
                self.basetypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 2094
                    self.attributespecifierseq(0)


                self.state = 2097
                self.match(CPP14Parser.Virtual)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 492581209243648) != 0):
                    self.state = 2098
                    self.accessspecifier()


                self.state = 2101
                self.basetypespecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 2102
                    self.attributespecifierseq(0)


                self.state = 2105
                self.accessspecifier()
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 2106
                    self.match(CPP14Parser.Virtual)


                self.state = 2109
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassordecltypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype" ):
                listener.enterClassordecltype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype" ):
                listener.exitClassordecltype(self)




    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_classordecltype)
        try:
            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2114
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 2113
                    self.nestednamespecifier(0)


                self.state = 2116
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2117
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasetypespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basetypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasetypespecifier" ):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasetypespecifier" ):
                listener.exitBasetypespecifier(self)




    def basetypespecifier(self):

        localctx = CPP14Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessspecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier" ):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier" ):
                listener.exitAccessspecifier(self)




    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_accessspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 492581209243648) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiontypeidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionfunctionid" ):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionfunctionid" ):
                listener.exitConversionfunctionid(self)




    def conversionfunctionid(self):

        localctx = CPP14Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(CPP14Parser.Operator)
            self.state = 2125
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiontypeidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiontypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiontypeid" ):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiontypeid" ):
                listener.exitConversiontypeid(self)




    def conversiontypeid(self):

        localctx = CPP14Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2127
            self.typespecifierseq()
            self.state = 2129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.state = 2128
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiondeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiondeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiondeclarator" ):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiondeclarator" ):
                listener.exitConversiondeclarator(self)




    def conversiondeclarator(self):

        localctx = CPP14Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2131
            self.ptroperator()
            self.state = 2133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2132
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtorinitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ctorinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtorinitializer" ):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtorinitializer" ):
                listener.exitCtorinitializer(self)




    def ctorinitializer(self):

        localctx = CPP14Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2135
            self.match(CPP14Parser.Colon)
            self.state = 2136
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist" ):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist" ):
                listener.exitMeminitializerlist(self)




    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_meminitializerlist)
        self._la = 0 # Token type
        try:
            self.state = 2149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2138
                self.meminitializer()
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 2139
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2142
                self.meminitializer()
                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 2143
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2146
                self.match(CPP14Parser.Comma)
                self.state = 2147
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer" ):
                listener.enterMeminitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer" ):
                listener.exitMeminitializer(self)




    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_meminitializer)
        self._la = 0 # Token type
        try:
            self.state = 2161
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2151
                self.meminitializerid()
                self.state = 2152
                self.match(CPP14Parser.LeftParen)
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6740729341902775192) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276798041) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 2153
                    self.expressionlist()


                self.state = 2156
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2158
                self.meminitializerid()
                self.state = 2159
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid" ):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid" ):
                listener.exitMeminitializerid(self)




    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_meminitializerid)
        try:
            self.state = 2165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorfunctionidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def operator(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_operatorfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorfunctionid" ):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorfunctionid" ):
                listener.exitOperatorfunctionid(self)




    def operatorfunctionid(self):

        localctx = CPP14Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.match(CPP14Parser.Operator)
            self.state = 2168
            self.operator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteraloperatoridContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literaloperatorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid" ):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid" ):
                listener.exitLiteraloperatorid(self)




    def literaloperatorid(self):

        localctx = CPP14Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_literaloperatorid)
        try:
            self.state = 2175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2170
                self.match(CPP14Parser.Operator)
                self.state = 2171
                self.match(CPP14Parser.Stringliteral)
                self.state = 2172
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2173
                self.match(CPP14Parser.Operator)
                self.state = 2174
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatedeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templatedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatedeclaration" ):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatedeclaration" ):
                listener.exitTemplatedeclaration(self)




    def templatedeclaration(self):

        localctx = CPP14Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2177
            self.match(CPP14Parser.Template)
            self.state = 2178
            self.match(CPP14Parser.Less)
            self.state = 2179
            self.templateparameterlist(0)
            self.state = 2180
            self.match(CPP14Parser.Greater)
            self.state = 2181
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext,0)


        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist" ):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist" ):
                listener.exitTemplateparameterlist(self)



    def templateparameterlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 342
        self.enterRecursionRule(localctx, 342, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2184
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2191
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2186
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2187
                    self.match(CPP14Parser.Comma)
                    self.state = 2188
                    self.templateparameter() 
                self.state = 2193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TypeparameterContext,0)


        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter" ):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter" ):
                listener.exitTemplateparameter(self)




    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_templateparameter)
        try:
            self.state = 2196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2194
                self.typeparameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2195
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeparameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter" ):
                listener.enterTypeparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter" ):
                listener.exitTypeparameter(self)




    def typeparameter(self):

        localctx = CPP14Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_typeparameter)
        self._la = 0 # Token type
        try:
            self.state = 2246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2198
                self.match(CPP14Parser.Class)
                self.state = 2200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
                if la_ == 1:
                    self.state = 2199
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2203
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2202
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2205
                self.match(CPP14Parser.Class)
                self.state = 2207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 2206
                    self.match(CPP14Parser.Identifier)


                self.state = 2209
                self.match(CPP14Parser.Assign)
                self.state = 2210
                self.typeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2211
                self.match(CPP14Parser.Typename)
                self.state = 2213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 2212
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2216
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2215
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2218
                self.match(CPP14Parser.Typename)
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 2219
                    self.match(CPP14Parser.Identifier)


                self.state = 2222
                self.match(CPP14Parser.Assign)
                self.state = 2223
                self.typeid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2224
                self.match(CPP14Parser.Template)
                self.state = 2225
                self.match(CPP14Parser.Less)
                self.state = 2226
                self.templateparameterlist(0)
                self.state = 2227
                self.match(CPP14Parser.Greater)
                self.state = 2228
                self.match(CPP14Parser.Class)
                self.state = 2230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2229
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2232
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2235
                self.match(CPP14Parser.Template)
                self.state = 2236
                self.match(CPP14Parser.Less)
                self.state = 2237
                self.templateparameterlist(0)
                self.state = 2238
                self.match(CPP14Parser.Greater)
                self.state = 2239
                self.match(CPP14Parser.Class)
                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 2240
                    self.match(CPP14Parser.Identifier)


                self.state = 2243
                self.match(CPP14Parser.Assign)
                self.state = 2244
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatenameContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletemplateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletemplateid" ):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletemplateid" ):
                listener.exitSimpletemplateid(self)




    def simpletemplateid(self):

        localctx = CPP14Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_simpletemplateid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2248
            self.templatename()
            self.state = 2249
            self.match(CPP14Parser.Less)
            self.state = 2251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2770873071137291368) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276668025) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                self.state = 2250
                self.templateargumentlist(0)


            self.state = 2253
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid" ):
                listener.enterTemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid" ):
                listener.exitTemplateid(self)




    def templateid(self):

        localctx = CPP14Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateid)
        self._la = 0 # Token type
        try:
            self.state = 2270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2255
                self.simpletemplateid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2256
                self.operatorfunctionid()
                self.state = 2257
                self.match(CPP14Parser.Less)
                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2770873071137291368) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276668025) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 2258
                    self.templateargumentlist(0)


                self.state = 2261
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2263
                self.literaloperatorid()
                self.state = 2264
                self.match(CPP14Parser.Less)
                self.state = 2266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2770873071137291368) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 3495637736276668025) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 127) != 0):
                    self.state = 2265
                    self.templateargumentlist(0)


                self.state = 2268
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatename" ):
                listener.enterTemplatename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatename" ):
                listener.exitTemplatename(self)




    def templatename(self):

        localctx = CPP14Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateargumentlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist" ):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist" ):
                listener.exitTemplateargumentlist(self)



    def templateargumentlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 354
        self.enterRecursionRule(localctx, 354, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.templateargument()
            self.state = 2277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2276
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2279
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2280
                    self.match(CPP14Parser.Comma)
                    self.state = 2281
                    self.templateargument()
                    self.state = 2283
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                    if la_ == 1:
                        self.state = 2282
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateargumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument" ):
                listener.enterTemplateargument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument" ):
                listener.exitTemplateargument(self)




    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_templateargument)
        try:
            self.state = 2293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2290
                self.constantexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2291
                self.typeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2292
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenamespecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename(self):
            return self.getToken(CPP14Parser.Typename, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier" ):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier" ):
                listener.exitTypenamespecifier(self)




    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_typenamespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2295
                self.match(CPP14Parser.Typename)
                self.state = 2296
                self.nestednamespecifier(0)
                self.state = 2297
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2299
                self.match(CPP14Parser.Typename)
                self.state = 2300
                self.nestednamespecifier(0)
                self.state = 2302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 2301
                    self.match(CPP14Parser.Template)


                self.state = 2304
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitinstantiationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitinstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitinstantiation" ):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitinstantiation" ):
                listener.exitExplicitinstantiation(self)




    def explicitinstantiation(self):

        localctx = CPP14Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_explicitinstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 2308
                self.match(CPP14Parser.Extern)


            self.state = 2311
            self.match(CPP14Parser.Template)
            self.state = 2312
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitspecializationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitspecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitspecialization" ):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitspecialization" ):
                listener.exitExplicitspecialization(self)




    def explicitspecialization(self):

        localctx = CPP14Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2314
            self.match(CPP14Parser.Template)
            self.state = 2315
            self.match(CPP14Parser.Less)
            self.state = 2316
            self.match(CPP14Parser.Greater)
            self.state = 2317
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryblock" ):
                listener.enterTryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryblock" ):
                listener.exitTryblock(self)




    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2319
            self.match(CPP14Parser.Try)
            self.state = 2320
            self.compoundstatement()
            self.state = 2321
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiontryblockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiontryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiontryblock" ):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiontryblock" ):
                listener.exitFunctiontryblock(self)




    def functiontryblock(self):

        localctx = CPP14Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_functiontryblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            self.match(CPP14Parser.Try)
            self.state = 2325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 2324
                self.ctorinitializer()


            self.state = 2327
            self.compoundstatement()
            self.state = 2328
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerseqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerseq" ):
                listener.enterHandlerseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerseq" ):
                listener.exitHandlerseq(self)




    def handlerseq(self):

        localctx = CPP14Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.handler()
            self.state = 2332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2331
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)




    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2334
            self.match(CPP14Parser.Catch)
            self.state = 2335
            self.match(CPP14Parser.LeftParen)
            self.state = 2336
            self.exceptiondeclaration()
            self.state = 2337
            self.match(CPP14Parser.RightParen)
            self.state = 2338
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptiondeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration" ):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration" ):
                listener.exitExceptiondeclaration(self)




    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_exceptiondeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 2340
                    self.attributespecifierseq(0)


                self.state = 2343
                self.typespecifierseq()
                self.state = 2344
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==2 or _la==79:
                    self.state = 2346
                    self.attributespecifierseq(0)


                self.state = 2349
                self.typespecifierseq()
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 215512868983045) != 0):
                    self.state = 2350
                    self.abstractdeclarator()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2353
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowexpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_throwexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowexpression" ):
                listener.enterThrowexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowexpression" ):
                listener.exitThrowexpression(self)




    def throwexpression(self):

        localctx = CPP14Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self.match(CPP14Parser.Throw)
            self.state = 2358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2357
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.DynamicexceptionspecificationContext,0)


        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification" ):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification" ):
                listener.exitExceptionspecification(self)




    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_exceptionspecification)
        try:
            self.state = 2362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2360
                self.dynamicexceptionspecification()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2361
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicexceptionspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicexceptionspecification" ):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicexceptionspecification" ):
                listener.exitDynamicexceptionspecification(self)




    def dynamicexceptionspecification(self):

        localctx = CPP14Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_dynamicexceptionspecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2364
            self.match(CPP14Parser.Throw)
            self.state = 2365
            self.match(CPP14Parser.LeftParen)
            self.state = 2367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 301741589536210016) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 74309393851613415) != 0):
                self.state = 2366
                self.typeidlist(0)


            self.state = 2369
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist" ):
                listener.enterTypeidlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist" ):
                listener.exitTypeidlist(self)



    def typeidlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 380
        self.enterRecursionRule(localctx, 380, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2372
            self.typeid()
            self.state = 2374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2373
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2384
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2376
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2377
                    self.match(CPP14Parser.Comma)
                    self.state = 2378
                    self.typeid()
                    self.state = 2380
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                    if la_ == 1:
                        self.state = 2379
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2386
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NoexceptspecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification" ):
                listener.enterNoexceptspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification" ):
                listener.exitNoexceptspecification(self)




    def noexceptspecification(self):

        localctx = CPP14Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_noexceptspecification)
        try:
            self.state = 2393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2387
                self.match(CPP14Parser.Noexcept)
                self.state = 2388
                self.match(CPP14Parser.LeftParen)
                self.state = 2389
                self.constantexpression()
                self.state = 2390
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2392
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightShiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightShift" ):
                listener.enterRightShift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightShift" ):
                listener.exitRightShift(self)




    def rightShift(self):

        localctx = CPP14Parser.RightShiftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_rightShift)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2395
            self.match(CPP14Parser.Greater)
            self.state = 2396
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RightShiftAssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.Greater)
            else:
                return self.getToken(CPP14Parser.Greater, i)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_rightShiftAssign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRightShiftAssign" ):
                listener.enterRightShiftAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRightShiftAssign" ):
                listener.exitRightShiftAssign(self)




    def rightShiftAssign(self):

        localctx = CPP14Parser.RightShiftAssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_rightShiftAssign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.match(CPP14Parser.Greater)
            self.state = 2399
            self.match(CPP14Parser.Greater)
            self.state = 2400
            self.match(CPP14Parser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def Div(self):
            return self.getToken(CPP14Parser.Div, 0)

        def Mod(self):
            return self.getToken(CPP14Parser.Mod, 0)

        def Caret(self):
            return self.getToken(CPP14Parser.Caret, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Not(self):
            return self.getToken(CPP14Parser.Not, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CPP14Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def LeftShift(self):
            return self.getToken(CPP14Parser.LeftShift, 0)

        def rightShift(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftContext,0)


        def rightShiftAssign(self):
            return self.getTypedRuleContext(CPP14Parser.RightShiftAssignContext,0)


        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def Equal(self):
            return self.getToken(CPP14Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CPP14Parser.NotEqual, 0)

        def LessEqual(self):
            return self.getToken(CPP14Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(CPP14Parser.GreaterEqual, 0)

        def AndAnd(self):
            return self.getToken(CPP14Parser.AndAnd, 0)

        def OrOr(self):
            return self.getToken(CPP14Parser.OrOr, 0)

        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def ArrowStar(self):
            return self.getToken(CPP14Parser.ArrowStar, 0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = CPP14Parser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_operator)
        try:
            self.state = 2450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2402
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2403
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2404
                self.match(CPP14Parser.New)
                self.state = 2405
                self.match(CPP14Parser.LeftBracket)
                self.state = 2406
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2407
                self.match(CPP14Parser.Delete)
                self.state = 2408
                self.match(CPP14Parser.LeftBracket)
                self.state = 2409
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2410
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2411
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2412
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2413
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2414
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2415
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2416
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2417
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2418
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2419
                self.match(CPP14Parser.Not)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2420
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2421
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2422
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2423
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2424
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2425
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2426
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2427
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2428
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2429
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2430
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2431
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2432
                self.rightShift()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2433
                self.rightShiftAssign()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2434
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2435
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2436
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2437
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2438
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2439
                self.match(CPP14Parser.AndAnd)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2440
                self.match(CPP14Parser.OrOr)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2441
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2442
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2443
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2444
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2445
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2446
                self.match(CPP14Parser.LeftParen)
                self.state = 2447
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2448
                self.match(CPP14Parser.LeftBracket)
                self.state = 2449
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def booleanliteral(self):
            return self.getTypedRuleContext(CPP14Parser.BooleanliteralContext,0)


        def pointerliteral(self):
            return self.getTypedRuleContext(CPP14Parser.PointerliteralContext,0)


        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14Parser.UserdefinedliteralContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = CPP14Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_literal)
        try:
            self.state = 2459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.match(CPP14Parser.Integerliteral)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2453
                self.match(CPP14Parser.Characterliteral)
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2454
                self.match(CPP14Parser.Floatingliteral)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2455
                self.match(CPP14Parser.Stringliteral)
                pass
            elif token in [29, 64]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2456
                self.booleanliteral()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2457
                self.pointerliteral()
                pass
            elif token in [134, 135, 136, 137]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2458
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def False_(self):
            return self.getToken(CPP14Parser.False, 0)

        def True_(self):
            return self.getToken(CPP14Parser.True, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_booleanliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral" ):
                listener.enterBooleanliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral" ):
                listener.exitBooleanliteral(self)




    def booleanliteral(self):

        localctx = CPP14Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_booleanliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2461
            _la = self._input.LA(1)
            if not(_la==29 or _la==64):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerliteral" ):
                listener.enterPointerliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerliteral" ):
                listener.exitPointerliteral(self)




    def pointerliteral(self):

        localctx = CPP14Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self.match(CPP14Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserdefinedliteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_userdefinedliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral" ):
                listener.enterUserdefinedliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral" ):
                listener.exitUserdefinedliteral(self)




    def userdefinedliteral(self):

        localctx = CPP14Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_userdefinedliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2465
            _la = self._input.LA(1)
            if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[10] = self.capturelist_sempred
        self._predicates[15] = self.postfixexpression_sempred
        self._predicates[24] = self.noptrnewdeclarator_sempred
        self._predicates[29] = self.pmexpression_sempred
        self._predicates[30] = self.multiplicativeexpression_sempred
        self._predicates[31] = self.additiveexpression_sempred
        self._predicates[32] = self.shiftexpression_sempred
        self._predicates[33] = self.relationalexpression_sempred
        self._predicates[34] = self.equalityexpression_sempred
        self._predicates[35] = self.andexpression_sempred
        self._predicates[36] = self.exclusiveorexpression_sempred
        self._predicates[37] = self.inclusiveorexpression_sempred
        self._predicates[38] = self.logicalandexpression_sempred
        self._predicates[39] = self.logicalorexpression_sempred
        self._predicates[43] = self.expression_sempred
        self._predicates[49] = self.statementseq_sempred
        self._predicates[58] = self.declarationseq_sempred
        self._predicates[85] = self.enumeratorlist_sempred
        self._predicates[103] = self.attributespecifierseq_sempred
        self._predicates[106] = self.attributelist_sempred
        self._predicates[112] = self.balancedtokenseq_sempred
        self._predicates[114] = self.initdeclaratorlist_sempred
        self._predicates[118] = self.noptrdeclarator_sempred
        self._predicates[129] = self.noptrabstractdeclarator_sempred
        self._predicates[131] = self.noptrabstractpackdeclarator_sempred
        self._predicates[133] = self.parameterdeclarationlist_sempred
        self._predicates[140] = self.initializerlist_sempred
        self._predicates[150] = self.memberdeclaratorlist_sempred
        self._predicates[152] = self.virtspecifierseq_sempred
        self._predicates[156] = self.basespecifierlist_sempred
        self._predicates[171] = self.templateparameterlist_sempred
        self._predicates[177] = self.templateargumentlist_sempred
        self._predicates[190] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx:NestednamespecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def capturelist_sempred(self, localctx:CapturelistContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixexpression_sempred(self, localctx:PostfixexpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

    def noptrnewdeclarator_sempred(self, localctx:NoptrnewdeclaratorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def pmexpression_sempred(self, localctx:PmexpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeexpression_sempred(self, localctx:MultiplicativeexpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveexpression_sempred(self, localctx:AdditiveexpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def shiftexpression_sempred(self, localctx:ShiftexpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def relationalexpression_sempred(self, localctx:RelationalexpressionContext, predIndex:int):
            if predIndex == 22:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def equalityexpression_sempred(self, localctx:EqualityexpressionContext, predIndex:int):
            if predIndex == 26:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def andexpression_sempred(self, localctx:AndexpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def exclusiveorexpression_sempred(self, localctx:ExclusiveorexpressionContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def inclusiveorexpression_sempred(self, localctx:InclusiveorexpressionContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def logicalandexpression_sempred(self, localctx:LogicalandexpressionContext, predIndex:int):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def logicalorexpression_sempred(self, localctx:LogicalorexpressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def statementseq_sempred(self, localctx:StatementseqContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def declarationseq_sempred(self, localctx:DeclarationseqContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def enumeratorlist_sempred(self, localctx:EnumeratorlistContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def attributespecifierseq_sempred(self, localctx:AttributespecifierseqContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def attributelist_sempred(self, localctx:AttributelistContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 1)
         

    def balancedtokenseq_sempred(self, localctx:BalancedtokenseqContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def initdeclaratorlist_sempred(self, localctx:InitdeclaratorlistContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def noptrdeclarator_sempred(self, localctx:NoptrdeclaratorContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 2)
         

    def noptrabstractdeclarator_sempred(self, localctx:NoptrabstractdeclaratorContext, predIndex:int):
            if predIndex == 44:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 3)
         

    def noptrabstractpackdeclarator_sempred(self, localctx:NoptrabstractpackdeclaratorContext, predIndex:int):
            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 2)
         

    def parameterdeclarationlist_sempred(self, localctx:ParameterdeclarationlistContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def initializerlist_sempred(self, localctx:InitializerlistContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def memberdeclaratorlist_sempred(self, localctx:MemberdeclaratorlistContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def virtspecifierseq_sempred(self, localctx:VirtspecifierseqContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def basespecifierlist_sempred(self, localctx:BasespecifierlistContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def templateparameterlist_sempred(self, localctx:TemplateparameterlistContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def templateargumentlist_sempred(self, localctx:TemplateargumentlistContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def typeidlist_sempred(self, localctx:TypeidlistContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         




