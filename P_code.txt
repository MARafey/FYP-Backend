{
    "1": {
        "Loop": "for (int i = 0; i < graph.size(); i++) {\n    if (graph[x][i] == true) {\n      if (graph[i][start] == true) {\n        count++;\n      }\n    }\n  }",
        "Parallelized_Loop": "#pragma omp parallel for\nfor (int i = 0; i < graph.size(); i++) {\n  if (graph[x][i] == true) {\n    if (graph[i][start] == true) {\n      count++;\n    }\n  }\n}",
        "Tiled_Loop": "Not Tiled",
        "Complexity": 45,
        "Complexity_Class": 4
    },
    "2": {
        "Loop": "for (int i = 0; i < graph.size(); i++) {\n    int start = i;\n    for (int j = 0; j < graph.size(); j++) {\n      if (graph[i][j] == true && i != j) {\n        count += travelnext(graph, j, start);\n      }\n    }\n  }",
        "Parallelized_Loop": "#pragma omp parallel for reduction(+ : count)\nfor (int i = 0; i < graph.size(); i++) {\n  int start = i;\n  for (int j = 0; j < graph.size(); j++) {\n    if (graph[i][j] == true && i != j) {\n      count += travelnext(graph, j, start);\n    }\n  }\n}",
        "Tiled_Loop": "Not Tiled",
        "Complexity": 64,
        "Complexity_Class": 5
    },
    "3": {
        "Loop": "for (int i = 0; i < N; i++) {\n    for (int j = 0; j < N; j++) {\n      graph[i][j] = false;\n    }\n  }",
        "Parallelized_Loop": "#pragma omp parallel for shared(N, graph) private(i, j)\nfor (int i = 0; i < N; i++) {\n  for (int j = 0; j < N; j++) {\n    graph[i][j] = false;\n  }\n}",
        "Tiled_Loop": "Not Tiled",
        "Complexity": 37,
        "Complexity_Class": 3
    }
}